<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>day2</title>
      <link href="/2023/01/16/day2/"/>
      <url>/2023/01/16/day2/</url>
      
        <content type="html"><![CDATA[<h2 id="理解CSS｜-青训营笔记"><a href="#理解CSS｜-青训营笔记" class="headerlink" title="理解CSS｜ 青训营笔记"></a>理解CSS｜ 青训营笔记</h2><p>这是我参与「第五届青训营 」笔记创作活动的第2天</p><h3 id="一、本堂课重点内容："><a href="#一、本堂课重点内容：" class="headerlink" title="一、本堂课重点内容："></a>一、本堂课重点内容：</h3><ul><li>CSS代码构成、使用方法</li><li>CSS流程之选择器、文本渲染</li><li>CSS选择器的特异性、继承</li><li>CSS求值过程、调试方法</li><li>CSS布局方式及相关技术</li><li>CSS行级、块级盒模型</li></ul><h3 id="二、详细知识点介绍："><a href="#二、详细知识点介绍：" class="headerlink" title="二、详细知识点介绍："></a>二、详细知识点介绍：</h3><h4 id="1-CSS是什么"><a href="#1-CSS是什么" class="headerlink" title="1. CSS是什么"></a>1. CSS是什么</h4><ul><li>Cascading Style Sheets</li><li>用来定义页面元素的样式<ul><li>设置字体和颜色</li><li>设置位置和大小</li><li>添加动画效果</li></ul></li></ul><h4 id="2-基本构成"><a href="#2-基本构成" class="headerlink" title="2. 基本构成"></a>2. 基本构成</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    属性名: 属性值:</span><br><span class="line">    <span class="comment">/*属性名与属性值组成的语句是一个声明*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-在页面中使用CSS"><a href="#3-在页面中使用CSS" class="headerlink" title="3. 在页面中使用CSS"></a>3. 在页面中使用CSS</h4><p><strong>1. 外链式</strong></p><p>引入同一文件夹下的CSS文件，需要在头部写入<link rel="stylesheet" href="文件名.css">即可引入CSS文件</p><p><strong>2. 嵌入式</strong></p><p>在头部将CSS样式内容写入<style></style>标签中，一般适用于长沙市样式较少时</p><p><strong>3. 内联式</strong></p><p>直接在标签内引入style，并将CSS样式写入</p><h4 id="4-选择器"><a href="#4-选择器" class="headerlink" title="4. 选择器"></a>4. 选择器</h4><ul><li>找出页面中的元素，以便给他们设置样式</li><li>使用多种方式选择元素<ul><li>按照标签名、类名或者id(#)</li><li>按照属性</li><li>按照DOM树中的位置</li></ul></li></ul><p><strong>1. 类选择器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;done&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">//</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.done</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: gray;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: line-through;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>**2.属性选择器  **</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;zhao&quot;</span><span class="attr">disabled</span> /</span></span><br><span class="line"><span class="tag">&lt;<span class="attr">label</span>&gt;</span>密码：&lt;/1abel</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span><span class="attr">type</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-attr">[disabled]</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-伪类"><a href="#5-伪类" class="headerlink" title="5. 伪类"></a>5. 伪类</h4><ul><li>不基于标签和属性定位元素</li><li>几种伪类<ul><li>状态伪类</li><li>结构性伪类</li></ul></li></ul><p>常用的几种状态：</p><ul><li>hover：当鼠标经过该元素时</li><li>visited：当浏览过该标签时</li><li>link：当设置了链接时</li><li>focus：当获得焦点时</li></ul><p>引用指定的子盒子时：</p><p>引用第一个子盒子时：first-child</p><p>引用最后一个子盒子时：last-child</p><p><strong>注意：是给子元素的标签加引用，而不是父元素</strong></p><h4 id="6-组合"><a href="#6-组合" class="headerlink" title="6. 组合"></a>6. 组合</h4><table><thead><tr><th>名称</th><th>语法</th><th>说明</th><th>实例</th></tr></thead><tbody><tr><td>直接组合</td><td>AB</td><td>满足A同时满足B</td><td>input:focus</td></tr><tr><td>后代组合</td><td>A B</td><td>选中B,如果它是A的子孙</td><td>nav a</td></tr><tr><td>亲子组合</td><td>A&gt;B</td><td>选中B,如果它是A的子元素</td><td>section&gt;p</td></tr><tr><td>兄弟选择器</td><td>A~B</td><td>选中B,如果它在A后且和A同级</td><td>h2~p</td></tr><tr><td>相邻选择器</td><td>A+B</td><td>选中B,如果它紧跟在A后面</td><td>h2+p</td></tr></tbody></table><h4 id="7-选择器组"><a href="#7-选择器组" class="headerlink" title="7. 选择器组"></a>7. 选择器组</h4><p>每个选择器之间用逗号隔开，其余同选择器用法</p><p>选择器组常用于当部分CSS属性值相同时。可以将属性写在选择器组内，避免代码重复冗杂。</p><h4 id="8-其他"><a href="#8-其他" class="headerlink" title="8. 其他"></a>8. 其他</h4><p><img src="https://220678.oss-cn-qingdao.aliyuncs.com/21.png"></p><ul><li><p>透明度：alpha，数值范围：0~1</p></li><li><p>字体：font-family</p></li><li><p>font-size</p><ul><li>关键字：small、medium、large</li><li>长度：px、em</li><li>百分数：相对于父元素字体大小</li></ul></li><li><p>行高：line-height</p><p>测量方法：从上一行文字底部到下一行文字最低端即为行高</p></li><li><p>初始值：</p><ol><li>CSS中,每个属性都有一个初始值<ul><li>background的初始值为transparent</li><li>margin-left的初始值为0</li></ul></li><li>可以使用initial关键字显式重置为初始值<ul><li>background-color：initial</li></ul></li></ol></li><li><p>宽度：width</p><ul><li>指定content box宽度</li><li>取值为长度、百分数、auto</li><li>auto由浏览器根据其它属性确定</li><li>百分数相对于容器的content box宽度</li></ul></li><li><p>高度：height</p><ul><li>指定content box高度</li><li>取值为长度、百分数、auto</li><li>auto取值由内容计算得来</li><li>百分数相对于容器的content box高度</li><li>容器有指定的高度时，百分数才生效</li></ul></li><li><p>外边距：margin</p><ul><li>指定元素四个方向的外边距</li><li>取值可以是长度、百分数、auto</li><li>百分数相对于容器宽度</li><li>margin:auto 水平居中</li></ul></li><li><p>内边距：padding</p><ul><li>指定元素四个方向的内边距</li><li>百分数相对于容器宽度</li></ul><p>使用内边距时可能会有父盒子被撑开的问题，要把子盒子的值设置为父盒子的值减去两个padding的值</p></li><li><p>边框：border</p><p>指定容器边框样式、粗细和颜色</p><ul><li>三种属性<ul><li>border-width</li><li>border-style：solid、dotted、dashed</li><li>border-color</li></ul></li><li>四个方向<ul><li>border-top</li><li>border-right</li><li>border-bottom</li><li>border-left</li></ul></li></ul></li><li><p>溢出部分：overflow</p><p>属性值：visible、hidden、scroll</p></li><li><p>position属性</p><ul><li>static   默认值，非定位元素</li><li>relative   相对自身原本位置偏移，不脱离文档流<ul><li>在常规流里面布局</li><li>相对于自己本应该在的位置进行偏移</li><li>使用top、left、bottom、right设置偏移长度</li><li>流内其它元素当它没有偏移一样布局</li></ul></li><li>absolute    绝对定位，相对非static祖先元素定位<ul><li>脱离常规流</li><li>相对于最近的非static祖先定位</li><li>不会对流内元素布局造成影响</li></ul></li><li>fixed    相对于视口绝对定位</li></ul></li></ul><h4 id="9-调试CSS"><a href="#9-调试CSS" class="headerlink" title="9. 调试CSS"></a>9. 调试CSS</h4><ul><li>右键点击页面，选择检查</li><li>使用快捷键<ul><li>Ctrl+Shift+I   (Windows)</li><li>Cmd+Opt+I   (Mac)</li></ul></li></ul><h4 id="10-继承"><a href="#10-继承" class="headerlink" title="10. 继承"></a>10. 继承</h4><p>某些属性会自动继承其父元素的计算值，除非显式指定一个值</p><p>显式继承：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line"><span class="attribute">box-sizing</span>:inherit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line"><span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.some-widget</span> &#123;</span><br><span class="line"><span class="attribute">box-sizing</span>:content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11-布局"><a href="#11-布局" class="headerlink" title="11. 布局"></a>11. 布局</h4><p>确定内容的大小和位置的算法<br>依据元素、容器、兄弟节点和内容等信息来计算</p><p>布局相关技术：</p><p>常规流：行级、块级、表格布局、FlexBox、Grid布局</p><ul><li>根元素、浮动和绝对定位的元素会脱离常规流</li><li>其它元素都在常规流之内(in-flow)</li><li>常规流中的盒子，在某种排版上下文中参与布局</li></ul><p>行级排版上下文</p><ul><li>Inline Formatting Context (IFC)</li><li>只包含行级盒子的容器会创建一个IFC</li><li>IFC内的排版规则<ul><li>盒子在一行内水平摆放</li><li>一行放不下时，换行显示</li><li>text-align决定一行内盒子的水平对齐</li><li>vertical-align决定一个盒子在行内的垂直对齐</li><li>避开浮动((float)元素</li></ul></li></ul><p>块级排版上下文</p><ul><li><p>BFC内的排版规则</p><ul><li>盒子从上到下摆放</li><li>垂直margin合并</li><li>BFC内盒子的margin不会与外面的合并</li><li>BFC不会和浮动元素重叠</li></ul></li><li><p>某些容器会创建一个BFC</p><ul><li>根元素</li><li>浮动、绝对定位、inline-block</li><li>Flex子项和Grid子项</li><li>overflow值不是visible的块盒</li><li>display:flow-root;</li></ul></li></ul><p>浮动</p><p>绝对定位</p><p><img src="https://220678.oss-cn-qingdao.aliyuncs.com/37.png"></p><h4 id="12-块级元素和行级元素"><a href="#12-块级元素和行级元素" class="headerlink" title="12. 块级元素和行级元素"></a>12. 块级元素和行级元素</h4><p>块级元素：不和其他盒子并列摆放，自己独占一行，适用于所有的盒模型</p><p>常见的块级元素标签有：body、div、ul、li、section、main、h1~6等</p><p>行级元素：和其它行级盒子一起放在一行或拆开成多行，不使用width、height等块级元素的属性值</p><p>常见的行级元素标签有：span、em、cite、code、strong等</p><h4 id="13-FlexBox"><a href="#13-FlexBox" class="headerlink" title="13. FlexBox"></a>13. FlexBox</h4><ul><li>一种新的排版上下文</li><li>可以控制子盒子的：摆放的流向、摆放顺序、盒子的宽度和高度、水平和垂直方向的对齐、是否允许折行</li><li>Flexibility<ul><li>可以设置子项的弹性：当容器有剩余空间时，会伸展；容器空间不够时，会收缩。</li><li>flex-grow有剩余空间时的伸展能力</li><li>flex-shrink容器空间不足时收缩的能力</li><li>flex-basis没有伸展或收缩时的基础长度</li></ul></li></ul><h4 id="14-Grid布局"><a href="#14-Grid布局" class="headerlink" title="14. Grid布局"></a>14. Grid布局</h4><p>display：grid</p><ul><li>display:grid使元素生成一个块级的Grid容器</li><li>使用grid-template相关属性将容器划分为网格</li><li>设置每一个子项占哪些行&#x2F;列</li></ul><h3 id="三、实践练习例子："><a href="#三、实践练习例子：" class="headerlink" title="三、实践练习例子："></a>三、实践练习例子：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/style.css&quot;</span>&gt;</span></span><br><span class="line">//</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">list-style</span>: none; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; lem <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">//</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;margin: lem 0&quot;</span>&gt;</span>apple<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:orange;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:gray;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">1.8</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Web框架的架构模式探讨<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">1em</span>;</span><br><span class="line"><span class="attribute">border</span>:<span class="number">3px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">This is a paragraph of text with long word</span><br><span class="line">Honorificabilitudinitatibus.Here is an image</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://assets.codepen.io/59477/cat.png&quot;</span><span class="attr">alt</span>=<span class="string">&quot;cat&quot;</span>&gt;</span></span><br><span class="line">And <span class="tag">&lt;<span class="name">em</span>&gt;</span>Inline Block<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">10em</span>;</span></span><br><span class="line"><span class="language-css">//<span class="attribute">overflow-wrap</span>:break-word;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="number">#411</span>;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">em</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:inline-block;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">3em</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="number">#33c</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>        </span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:flex;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#966</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.a</span>,<span class="selector-class">.b</span>,<span class="selector-class">.c</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>:<span class="number">#fcc</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="四、课后个人总结："><a href="#四、课后个人总结：" class="headerlink" title="四、课后个人总结："></a>四、课后个人总结：</h3><ul><li>对元素的定位是CSS的重点，要理解定位方式的本质及核心，多尝试，多总结</li><li>CSS的另一个作用是对元素进行样式修饰，涉及到很多样式、属性、引用方法等要知道大致内容，在插件的提示下能够熟练应用</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day1</title>
      <link href="/2023/01/14/day1/"/>
      <url>/2023/01/14/day1/</url>
      
        <content type="html"><![CDATA[<h2 id="前端与-HTML-青训营笔记"><a href="#前端与-HTML-青训营笔记" class="headerlink" title="前端与 HTML | 青训营笔记"></a>前端与 HTML | 青训营笔记</h2><p>这是我参与「第五届青训营 」笔记创作活动的第1天。</p><h3 id="一、本节课重点内容："><a href="#一、本节课重点内容：" class="headerlink" title="一、本节课重点内容："></a>一、本节课重点内容：</h3><ol><li>前端工作的定义</li><li>前端技术栈拆解与分析</li><li>HTML作用分析</li><li>HTML语义化</li></ol><h3 id="二、详细知识点介绍："><a href="#二、详细知识点介绍：" class="headerlink" title="二、详细知识点介绍："></a>二、详细知识点介绍：</h3><h4 id="1-什么是前端"><a href="#1-什么是前端" class="headerlink" title="1. 什么是前端"></a>1. 什么是前端</h4><ul><li>解决<a href="https://baike.baidu.com/item/GUI/479966">GUI人机交互</a>问题</li><li>跨终端<ul><li>PC&#x2F;移动浏览器</li><li>客户端&#x2F;小程序</li><li>VR&#x2F;AR等</li></ul></li><li><a href="https://blog.csdn.net/dreamstone_xiaoqw/article/details/89741263">Web技术栈</a></li></ul><p>前端由和HTML、CSS、JavaScript三部分构成，分别负责网页的内容、样式和行为，在网络协议的联系下，上传至服务器端</p><h4 id="2-前端要关注的方面"><a href="#2-前端要关注的方面" class="headerlink" title="2. 前端要关注的方面"></a>2. 前端要关注的方面</h4><p>包括但不限于功能、安全、无障碍、体验、性能、美观、兼容等方面</p><h4 id="3-前端的边界"><a href="#3-前端的边界" class="headerlink" title="3. 前端的边界"></a>3. 前端的边界</h4><p>node、Electron、React Nation、WebRTC、WebGL、WebASSEMBLY等</p><h4 id="4-开发环境"><a href="#4-开发环境" class="headerlink" title="4. 开发环境"></a>4. 开发环境</h4><ul><li>浏览器：IE&#x2F;Edge、Chrome、Firefox、Safari等</li><li>编辑器：VSCode、Vim、WebStorm等</li></ul><h4 id="5-HTML是什么"><a href="#5-HTML是什么" class="headerlink" title="5. HTML是什么"></a>5. HTML是什么</h4><p>HTML包括</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">HyperText</a>(包括图片、标题、链接、表格等多种形式)      </p><p><a href="https://www.w3school.com.cn/tags/tag_term_hypertext.asp">Markup Language</a>(一种专门用来标记的语言)</p><h4 id="6-DOM树"><a href="#6-DOM树" class="headerlink" title="6. DOM树"></a>6. DOM树</h4><p><img src="https://220678.oss-cn-qingdao.aliyuncs.com/20230113152532.png"></p><h4 id="7-HTML语法"><a href="#7-HTML语法" class="headerlink" title="7. HTML语法"></a>7. HTML语法</h4><ul><li>标签和属性不区分大小写，推荐小写</li><li>空标签可以不闭合，比如input、meta</li><li>属性值推荐用双引号包裹</li><li>某些属性值可以省略，比如required、readonly</li></ul><h4 id="8-常用标签"><a href="#8-常用标签" class="headerlink" title="8. 常用标签"></a>8. 常用标签</h4><ul><li>无序标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>没有先后顺序，具体样式同笔记中的实心圆点</p><ul><li>有序标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有先后顺序，具体样式同笔记中的空心圆点</p><ul><li>其他标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>作者：<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>作品：<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;dd&gt;</code>标签的内容会空一个tab键的位置再显示内容，一个<code>&lt;dt&gt;&lt;/dt&gt;</code>标签可以有多个<code>&lt;dd&gt;&lt;/dd&gt;</code>标签</p><h4 id="9-输入"><a href="#9-输入" class="headerlink" title="9. 输入"></a>9. 输入</h4><p>input即表单类型，可以有多种类型，也有多种属性</p><p>常见的类型有：text、number、email、date、password、range、radio等</p><p>常见的属性有：value、alt、checked、placeholder、name、list等</p><h4 id="10-语义化"><a href="#10-语义化" class="headerlink" title="10. 语义化"></a>10. 语义化</h4><ul><li>HTML中的元素、属性及属性值都拥有某些含义</li><li>开发者应该遵循语义来编写HTML<ul><li>有序列表ol；无序列表用ul</li><li>lang属性表示内容所使用的语言</li></ul></li><li>好处<ul><li>代码可读性</li><li>可维护性</li><li>搜索引擎优化</li><li>提升无障碍性</li></ul></li><li>怎样做<ul><li>了解每个标签和属性的含义</li><li>思考什么标签最适合描述这个内容</li><li>不使用可视化工具生成代码</li></ul></li></ul><h4 id="11-面向对象"><a href="#11-面向对象" class="headerlink" title="11. 面向对象"></a>11. 面向对象</h4><ul><li>开发者-修改、维护页面</li><li>浏览器- 展示页面</li><li>搜索引擎-提取关键字、排序</li><li>屏幕阅读器</li></ul><p><strong>&#x3D;&#x3D;传达的是内容，而不是样式&#x3D;&#x3D;</strong></p><h3 id="三、实践练习例子："><a href="#三、实践练习例子：" class="headerlink" title="三、实践练习例子："></a>三、实践练习例子：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;/assets/music.ogg&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;/assets/video.mp4&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placehoder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">min</span>=<span class="string">&quot;1&quot;</span> <span class="attr">max</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">min</span>=<span class="string">&quot;2018-02-10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span>Hey<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">&quot;countries&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;countries&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>China<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>United Status<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Greece<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="四、课后个人总结："><a href="#四、课后个人总结：" class="headerlink" title="四、课后个人总结："></a>四、课后个人总结：</h3><p>前端的知识主要用于网页内容的呈现，包含许多标签，属性，选择器等内容，只有熟练掌握并且灵活应用，才能加上CSS和JavaScript的内容之后有更好的页面效果</p><h3 id="五、引用参考："><a href="#五、引用参考：" class="headerlink" title="五、引用参考："></a>五、引用参考：</h3><p>关于GUI的介绍：<a href="https://baike.baidu.com/item/GUI/479966">https://baike.baidu.com/item/GUI/479966</a></p><p>web开发技术栈总结：<a href="https://blog.csdn.net/dreamstone_xiaoqw/article/details/89741263">https://blog.csdn.net/dreamstone_xiaoqw/article/details/89741263</a></p><p>超文本链接：<a href="https://www.w3school.com.cn/tags/tag_term_hypertext.asp">https://www.w3school.com.cn/tags/tag_term_hypertext.asp</a></p><p>标记语言Markup Language：<a href="https://cloud.tencent.com/developer/article/1597638">https://cloud.tencent.com/developer/article/1597638</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day3</title>
      <link href="/2023/01/14/day3/"/>
      <url>/2023/01/14/day3/</url>
      
        <content type="html"><![CDATA[<h2 id="跟着月影学-JavaScript-｜-青训营笔记"><a href="#跟着月影学-JavaScript-｜-青训营笔记" class="headerlink" title="跟着月影学 JavaScript ｜ 青训营笔记"></a>跟着月影学 JavaScript ｜ 青训营笔记</h2><p>这是我参与「第五届青训营 」笔记创作活动的第3天</p><h3 id="一、本堂课重点内容："><a href="#一、本堂课重点内容：" class="headerlink" title="一、本堂课重点内容："></a>一、本堂课重点内容：</h3><ol><li>JavaScript好代码的准则、编程范式</li><li>HTML&#x2F;CSS&#x2F;JS各司其责</li><li>组件的定义解析及特征、组件封装的基本方法</li><li>用原生JS实现轮播图</li><li>过程抽象函数、高阶函数使用模式</li><li>写代码关注事项</li></ol><h3 id="二、详细知识点介绍："><a href="#二、详细知识点介绍：" class="headerlink" title="二、详细知识点介绍："></a>二、详细知识点介绍：</h3><h4 id="1-写好JS的一些原则"><a href="#1-写好JS的一些原则" class="headerlink" title="1. 写好JS的一些原则"></a>1. 写好JS的一些原则</h4><ul><li><p>各司其责：让HTMLCSS和JavaScript职能分离</p></li><li><p>组件封装：好的UI组件具备正确性、扩展性、复用性</p></li><li><p>过程抽象：应用函数式编程思想</p><p>总结：</p><ul><li>HTML&#x2F;CSS&#x2F;S各司其责</li><li>应当避免不必要的由JS直接操作样式</li><li>可以用class来表示状态</li><li>纯展示类交互寻求零]S方案</li></ul></li></ul><h4 id="2-组件封装"><a href="#2-组件封装" class="headerlink" title="2. 组件封装"></a>2. 组件封装</h4><p>组件是指Wb页面上抽出来一个个包含模版(HTML)、功能(JS)和样式(CSS)的单元。</p><p><strong>原则：</strong></p><p>封装性、正确性、扩展性、复用性</p><p><strong>结构设计：HTML</strong></p><p>轮播图是一个典型的列表结构我们可以使用无序列表<ul>元素来实现</p><p><strong>效果展现：CSS</strong></p><ul><li>使用CSS绝对定位将图片重叠在同一个位置</li><li>轮播图切换的状态使用修饰符</li><li>轮播图的切换动画使用CSS transition</li></ul><p><strong>行为设计：API、控制流</strong></p><p>API：设计应保证原子操作，职责单一，满足灵活性</p><p>控制流：使用自定义事件来解耦</p><p><strong>三次重构：插件化、模板化、抽象化</strong></p><ul><li>将控制元素抽取成插件</li><li>插件与组件之间通过依赖注入</li><li>方式建立联系</li><li>将HTML模板化，更易于扩展</li></ul><p>抽象：将通用的组件模型抽象出来</p><p><strong>总结：</strong></p><p>基本方法：结构设计、展现效果、行为设计(API(功能)、Event(控制流))</p><h4 id="3-过程抽象"><a href="#3-过程抽象" class="headerlink" title="3. 过程抽象"></a>3. 过程抽象</h4><p>为了能够让“只执行一次“的需求覆盖不同的事件处理，我们可以将这个需求离出来。这个过程我们称为过程抽象。</p><ul><li>用来处理局部细节控制的一些方法</li><li>函数式编程思想的基础应用</li></ul><h4 id="4-高阶函数"><a href="#4-高阶函数" class="headerlink" title="4. 高阶函数"></a>4. 高阶函数</h4><ul><li>以函数作为参数</li><li>以函数作为返回值</li><li>常用于作为函数装饰器</li><li>常用高阶函数：Once、Throttle、Debounce、Consumer等</li></ul><h4 id="5-编程范式"><a href="#5-编程范式" class="headerlink" title="5. 编程范式"></a>5. 编程范式</h4><p>命令式与声明式</p><h3 id="三、实践练习例子："><a href="#三、实践练习例子：" class="headerlink" title="三、实践练习例子："></a>三、实践练习例子：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeBtn&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> body <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line"><span class="keyword">if</span>(e.<span class="property">target</span>.<span class="property">innerHTML</span> ===<span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">body.<span class="property">style</span>.<span class="property">backgroundColor</span> <span class="string">&#x27;black&#x27;</span></span><br><span class="line">body.<span class="property">style</span>.<span class="property">color</span> <span class="string">&#x27;white&#x27;</span>;</span><br><span class="line">e.<span class="property">target</span>.<span class="property">innerHTML</span> =<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">body.<span class="property">style</span>.<span class="property">backgroundColor</span> <span class="string">&#x27;white&#x27;</span>;</span><br><span class="line">body.<span class="property">style</span>.<span class="property">color</span> <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line">e.<span class="property">target</span>.<span class="property">innerHTML</span>=<span class="string">&#x27;◆&#x27;</span>；</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeBtn&#x27;</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> body <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line"><span class="keyword">if</span>(body.<span class="property">className</span> !=<span class="string">&#x27;night&#x27;</span>) &#123;</span><br><span class="line">body.<span class="property">className</span> <span class="string">&#x27;night&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">body.<span class="property">className</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 1ist=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> map1 []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="number">0</span>;i list.<span class="property">length</span>;i++) &#123;</span><br><span class="line">mapl.<span class="title function_">push</span>(list[i]<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">1et 1ist=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> double x =&gt;x <span class="number">2</span>;</span><br><span class="line">list.<span class="title function_">map</span>(double);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="title function_">layerTransformInvert</span>() &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">this</span>[_layerTransformInvert])<span class="keyword">return</span> <span class="variable language_">this</span>[_layerTransformInvert];</span><br><span class="line"><span class="keyword">const</span> m <span class="variable language_">this</span>.<span class="property">transformMatrix</span>;</span><br><span class="line"><span class="keyword">if</span>(m[<span class="number">0</span>]==<span class="number">1</span>&amp;m[<span class="number">1</span>]==<span class="number">0</span>&amp;m[<span class="number">2</span>]==<span class="number">0</span>&amp;&amp;m[<span class="number">3</span>]==<span class="number">1</span>&amp;&amp;m[<span class="number">4</span>]==<span class="number">0</span>&amp;&amp;m[<span class="number">5</span>]===<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"><span class="variable language_">this</span>[_layerTransformInvert]mat2d.<span class="title function_">invert</span>(m);</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>[_layerTransformInvert];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-left-pad事件"><a href="#6-left-pad事件" class="headerlink" title="6. left-pad事件"></a>6. left-pad事件</h4><p>事件本身的槽点：</p><ul><li>NPM模块粒度</li><li>代码风格</li><li>代码质量&#x2F;效率</li></ul><h4 id="7-经典案例"><a href="#7-经典案例" class="headerlink" title="7. 经典案例"></a>7. 经典案例</h4><ul><li><p>交通灯：状态切换</p></li><li><p>判断是否是4的幂</p></li><li><p>洗牌</p></li><li><p>分红包</p></li></ul><h3 id="四、课后个人总结："><a href="#四、课后个人总结：" class="headerlink" title="四、课后个人总结："></a>四、课后个人总结：</h3><ul><li>组件封装是相对来说比较陌生的部分</li><li>经典案例涉及到了多种版本及多种情形，要能够理解，并知道好的好在哪，不好在弊端在哪</li><li>JavaScript比较“宽泛”，实现同一种功能可以有很多种方法，但是要思考侧重点在哪，怎样是最好的方法</li></ul><h3 id="五、引用参考："><a href="#五、引用参考：" class="headerlink" title="五、引用参考："></a>五、引用参考：</h3><p>JavaScript：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a></p><p>JavaScript中的组件：<a href="https://developer.mozilla.org/zh-CN/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets">https://developer.mozilla.org/zh-CN/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发现的一些宝藏脚本</title>
      <link href="/2023/01/13/%E5%8F%91%E7%8E%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9D%E8%97%8F%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/01/13/%E5%8F%91%E7%8E%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9D%E8%97%8F%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>在使用edge浏览器时，发现的</p>]]></content>
      
      
      
        <tags>
            
            <tag> 脚本推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM总结</title>
      <link href="/2023/01/12/BOM%E6%80%BB%E7%BB%93/"/>
      <url>/2023/01/12/BOM%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="BOM总结"><a href="#BOM总结" class="headerlink" title="BOM总结"></a>BOM总结</h2><h3 id="BOM概述"><a href="#BOM概述" class="headerlink" title="BOM概述"></a>BOM概述</h3><p>BOM（Browser Object Model）即<strong>浏览器对象模型</strong>，它提供了&#x3D;&#x3D;独立于内容&#x3D;&#x3D;而与&#x3D;&#x3D;浏览器窗口&#x3D;&#x3D;进行交互的对象，其核心对象是 window</p><p>BOM 由一系列相关的&#x3D;&#x3D;对象&#x3D;&#x3D;构成，并且每个对象都提供了很多方法与属性。BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C，BOM 最初是Netscape 浏览器标准的一部分</p><h4 id="1-DOM与BOM的区别"><a href="#1-DOM与BOM的区别" class="headerlink" title="1. DOM与BOM的区别"></a>1. DOM与BOM的区别</h4><p>DOM</p><ul><li>文档对象模型</li><li>DOM是把<strong>文档</strong>当做一个<strong>对象</strong>来看待</li><li>DOM的顶级对象是<strong>document</strong></li><li>DOM主要学习的是操作页面元素</li><li>DOM是W3C标准</li></ul><p>BOM</p><ul><li>浏览器对象模型</li><li>把<strong>浏览器</strong>当做一个<strong>对象</strong>来看待</li><li>BOM的顶级对象是<strong>window</strong></li><li>BOM学习的是浏览器窗口交互的一些对象</li><li>BOM是浏览器厂商在各自浏览器上定义的，兼容性较差</li></ul><h4 id="2-BOM构成"><a href="#2-BOM构成" class="headerlink" title="2. BOM构成"></a>2. BOM构成</h4><p>BOM比DOM更大，包含了DOM</p><p><img src="https://220678.oss-cn-qingdao.aliyuncs.com/Snipaste_2023-01-12_10-44-45.png"></p><p>window对象是浏览器的顶级对象，具有双重角色</p><ol><li><p>是JS访问浏览器窗口的一个<strong>接口</strong></p></li><li><p>是一个全局对象，定义在全局作用域中的变量、函数都会变成window对象的属性和方法</p></li><li><p>在调用时可以省略window，对话框都属于window的对象和方法，如alert()、prompt()等</p></li></ol><h3 id="window对象的常见事件"><a href="#window对象的常见事件" class="headerlink" title="window对象的常见事件"></a>window对象的常见事件</h3><h4 id="1-窗口加载事件"><a href="#1-窗口加载事件" class="headerlink" title="1. 窗口加载事件"></a>1. 窗口加载事件</h4><blockquote><p><strong>window.onload &#x3D; function(){}或</strong></p><p><strong>window.addEventListener(‘load’, function() {});</strong></p></blockquote><p>window.onload是窗口(页面)加载事件，当文档内容完全加载完成才会触发该事件(包括图像、脚本文件、CSS文件等)，就调用的处理函数</p><p><strong>注意：</strong></p><ol><li>有了window.onload就可以把JS代码写到页面元素的上方，因为onload是等页面内容完全加载完毕，再去执行处理函数</li><li>window.onload传统注册事件只能写一次，如果有一个，会以最后一个window.onload为准</li><li>如果使用addEventListener则没有限制</li></ol><blockquote><p>document.addEventListener(‘DOMContentLoaded’, function() {})</p></blockquote><p>DOMContentLoaded事件触发时，仅当DOM加载完成，不包括样式表、图片、flash等</p><p>如果页面的图片很多的话, 从用户访问到<code>onload</code>触发可能需要较长的时间, 交互效果就不能实现，必然影响用户的体验，此时用DOMContentLoaded事件比较合适</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;点击&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">22</span>);                    </span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;33&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//load等页面内容完全加载完毕，包含页面DOM元素 图片 flash CSS等</span></span><br><span class="line"><span class="comment">//DOMContentLoaded是DOM加载完毕，不包含flash CSS等就可以执行 加载速度比load更快一些</span></span><br></pre></td></tr></table></figure><h4 id="2-调整窗口大小事件"><a href="#2-调整窗口大小事件" class="headerlink" title="2. 调整窗口大小事件"></a>2. 调整窗口大小事件</h4><blockquote><p>window.onresize &#x3D; function() {}</p><p>window.addEventListener(‘resize’, function() {});</p></blockquote><p>window.onresize是调整窗口大小加载事件，当触发时就调用的处理函数</p><p><strong>注意：</strong></p><ol><li>只有窗口大小反生&#x3D;&#x3D;像素变化&#x3D;&#x3D;。才会触发这个事件</li><li>经常利用这个事件完成响应式布局。</li><li>用window.innerWidth来表示当前屏幕的宽度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelestor</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">innerWidth</span> &lt;= <span class="number">800</span>) &#123;</span><br><span class="line">        div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><h4 id="1-setTimeout-定时器"><a href="#1-setTimeout-定时器" class="headerlink" title="1. setTimeout()定时器"></a>1. setTimeout()定时器</h4><blockquote><p><strong>window.setTimeout(调用函数，[延迟的毫秒数]);</strong></p></blockquote><p>setTimeout()方法用于设置一个定时器，该定时器在定时器到期后执行调用函数,<strong>只执行一次</strong></p><p><strong>注意：</strong></p><ol><li>window可以省略</li><li>这个调用函数可以直接写函数，或者函数名或者采取字符串’函数名()’三种形式，不推荐第三种</li><li>延迟的毫秒数省略默认是0，如果写，必须是毫秒</li><li>因为定时器可能有很多。所以经常需要给定时器赋值一个标识符</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;时间到了&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爆炸&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(callback, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>setTimeout()这个调用函数我们也称为回调函数callback</p><p>普通函数是按照代码顺序直接调用，而回调函数需要等待时间，事件道路才会调用这个函数，因此称为回调函数</p><p>之前的element.onclick &#x3D; function(){}或者element.addEventListener(‘click’, fn);里面的函数也是回调函数</p><h4 id="2-clearTimeout-停止定时器"><a href="#2-clearTimeout-停止定时器" class="headerlink" title="2.clearTimeout()停止定时器"></a>2.clearTimeout()停止定时器</h4><blockquote><p><strong>window.clearTimeout(timeoutID)</strong></p></blockquote><p>clearTimeout()方法取消了先前通过调用setTimeout()建立的定时器</p><p><strong>注意：</strong></p><ol><li>window可以省略</li><li>括号里面的参数就是定时器的&#x3D;&#x3D;标识符&#x3D;&#x3D;</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击停止定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爆炸&#x27;</span>)；</span></span><br><span class="line"><span class="language-javascript">        &#125;,<span class="number">5000</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-setInterval-定时器"><a href="#3-setInterval-定时器" class="headerlink" title="3. setInterval()定时器"></a>3. setInterval()定时器</h4><blockquote><p><strong>window.setInterval(回调函数, [间隔的毫秒数])</strong></p></blockquote><p>setInterval()方法重复调用一个函数。每隔这个时间，就调用一次回调函数</p><p><strong>注意：</strong></p><ol><li><p>第一次执行也是间隔毫秒数之后执行，之后每隔毫秒数就执行一次，<strong>会执行很多次</strong></p></li><li><p>其余同setTimeout注意事项</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;继续输出&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h4 id="4-停止setInterval-定时器"><a href="#4-停止setInterval-定时器" class="headerlink" title="4. 停止setInterval()定时器"></a>4. 停止setInterval()定时器</h4><blockquote><p><strong>window.clearInterval(intervalID)</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> begin = <span class="variable language_">document</span>.<span class="title function_">querySelestor</span>(<span class="string">&#x27;.begin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> stop = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.stop&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">begin.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">stop.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><p>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，一般情况下this的最终指向的是那个调用它的对象</p><ol><li>全局作用域或者普通函数中this指向全局对象window（注意定时器里面的this指向window）</li><li>方法调用中谁调用this指向谁</li><li>构造函数中this指向构造函数的实例</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);   <span class="comment">//输出window</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">//输出window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.button&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="comment">//this指向的是button这个按钮对象</span></span><br><span class="line">&#125;</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="comment">//this指向的是btn这个按钮对象</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="comment">//this指向fun实例对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h3><h4 id="1-JS是单线程"><a href="#1-JS是单线程" class="headerlink" title="1.JS是单线程"></a>1.JS是单线程</h4><p>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。比如我们对某个 DOM 元素进行添加和删除操作，不能同时进行。 应该先进行添加，之后再删除</p><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问题是： 如果JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉</p><h4 id="2-同步和异步"><a href="#2-同步和异步" class="headerlink" title="2. 同步和异步"></a>2. 同步和异步</h4><p>为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程。于是，JS 中出现了同步和异步</p><ul><li><strong>同步</strong></li></ul><p>前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的</p><p>同步任务都在主线程上执行，形成一个**&#x3D;&#x3D;执行栈&#x3D;&#x3D;**</p><ul><li><strong>异步</strong></li></ul><p>在做这件事的同时，你还可以去处理其他事情</p><p>异步任务是通过&#x3D;&#x3D;回调函数&#x3D;&#x3D;实现的，一般而言，异步任务有以下三种类型:</p><ol><li><p>普通事件，如 click、resize 等</p></li><li><p>资源加载，如 load、error 等</p></li><li><p>定时器，包括 setInterval、setTimeout 等</p></li></ol><p>异步任务相关回调函数添加到&#x3D;&#x3D;<strong>任务队列</strong>&#x3D;&#x3D;中(任务队列也称为消息队列)</p><p><strong>&#x3D;&#x3D;他们的本质区别： 这条流水线上各个流程的执行顺序不同&#x3D;&#x3D;</strong></p><h4 id="3-执行机制"><a href="#3-执行机制" class="headerlink" title="3. 执行机制"></a>3. 执行机制</h4><ol><li>先执行执行栈中的同步任务。</li><li>异步任务（回调函数）放入任务队列中。</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行</li></ol><p>由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环</p><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>window 对象给我们提供了一个 location 属性<strong>用于获取或设置窗体的 URL</strong>，并且可以用于解析 URL 。 因为这个属性返回的是一个对象，所以我们将这个属性也称为 location 对象。</p><h4 id="2-URL"><a href="#2-URL" class="headerlink" title="2. URL"></a>2. URL</h4><p>URL,统一资源定位符，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它</p><p>URL 的一般语法格式为：</p><blockquote><p><strong>protocol:&#x2F;&#x2F;host[:port]&#x2F;path&#x2F;[?query]#fragment</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//http://www.incast.cn/index.html?name=andy&amp;age=18#link</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">组成</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">protocol</td><td align="center">通信协议 常用的http,ftp,maito等</td></tr><tr><td align="center">host</td><td align="center">主机(域名)<a href="http://www.xxx.com/">www.xxx.com</a></td></tr><tr><td align="center">port</td><td align="center">端口号 可选，省略时使用方案的默认端口 如http的默认端口为80</td></tr><tr><td align="center">path</td><td align="center">路径 由零或多个’&#x2F;‘符号隔开的字符串，一般用来表示主机上的一个目录或文件地址</td></tr><tr><td align="center">query</td><td align="center">参数 以键值对的形式，通过&amp;符号分隔开</td></tr><tr><td align="center">fragment</td><td align="center">片段 #后面内容常见于链接 锚点</td></tr></tbody></table><h4 id="3-location对象的属性"><a href="#3-location对象的属性" class="headerlink" title="3. location对象的属性"></a>3. location对象的属性</h4><table><thead><tr><th align="center">location对象属性</th><th align="center">返回值</th></tr></thead><tbody><tr><td align="center">location.href</td><td align="center">获得或者设置整个URL</td></tr><tr><td align="center">location.host</td><td align="center">返回主机(域名)</td></tr><tr><td align="center">location.port</td><td align="center">返回端口号 如果未写返回空字符串</td></tr><tr><td align="center">location.pathname</td><td align="center">返回路径</td></tr><tr><td align="center">location.search</td><td align="center">返回参数</td></tr><tr><td align="center">location.hash</td><td align="center">返回片段 #后面内容常见于链接 锚点</td></tr></tbody></table><p>&#x3D;&#x3D;<strong>重点：href和search</strong>&#x3D;&#x3D;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">queryDelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">href</span>);</span><br><span class="line">    location.<span class="property">href</span> = <span class="string">&#x27;http://www.itcast.cn&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> timer = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer == <span class="number">0</span>) &#123;</span><br><span class="line">        location.<span class="property">href</span> = <span class="string">&#x27;http://www.itcast.cn&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        div.<span class="property">innerHTML</span> = <span class="string">&#x27;您将在&#x27;</span>+timer+<span class="string">&#x27;秒钟之后跳转到首页&#x27;</span>;</span><br><span class="line">        timer--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">serch</span>);  <span class="comment">//?uname=andy</span></span><br><span class="line"><span class="comment">//1.先去掉?</span></span><br><span class="line"><span class="keyword">var</span> params = location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>); <span class="comment">//uname=andy</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(params);</span><br><span class="line"><span class="comment">//2.利用=把字符串分割为数组 split(&#x27;=&#x27;)</span></span><br><span class="line"><span class="keyword">var</span> arr = params.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.div&#x27;</span>);</span><br><span class="line"><span class="comment">//3.把数据写入div中</span></span><br><span class="line">div.<span class="property">innerHTML</span> = arr[<span class="number">1</span>] + <span class="string">&#x27;欢迎您&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="4-location对象的方法"><a href="#4-location对象的方法" class="headerlink" title="4. location对象的方法"></a>4. location对象的方法</h4><table><thead><tr><th>location对象方法</th><th>返回值</th></tr></thead><tbody><tr><td>location.assign()</td><td>跟href一样，可以转跳页面(也称为重定向页面)</td></tr><tr><td>location.replace()</td><td>替换当前页面，因为不记录历史，所以不能后退页面</td></tr><tr><td>location.reload()</td><td>重新加载页面，相当于刷新按钮或者f5如果参数为true强制刷新ctrl+f5</td></tr></tbody></table><h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><p>navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 userAgent，该属性可以返回由客户机发送服务器的 user-agent 头部的值</p><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><p>window 对象给我们提供了一个 history 对象，与浏览器历史记录进行交互。该对象包含用户(在浏览器窗口中)访问过的 URL</p><table><thead><tr><th>history对象方法</th><th>作用</th></tr></thead><tbody><tr><td>back()</td><td>后退功能</td></tr><tr><td>forward()</td><td>前进功能</td></tr><tr><td>go(参数)</td><td>前进后退功能(参数如果是1前进一个页面如果是-1后退一个页面)</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> =<span class="string">&quot;index.html&quot;</span>&gt;</span>点击我去往首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        history.<span class="title function_">forward</span>();</span></span><br><span class="line"><span class="language-javascript">        history.<span class="title function_">go</span>(-<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DOM总结</title>
      <link href="/2023/01/11/DOM%E6%80%BB%E7%BB%93/"/>
      <url>/2023/01/11/DOM%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="DOM知识总结"><a href="#DOM知识总结" class="headerlink" title="DOM知识总结"></a>DOM知识总结</h2><h3 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h3><p>文档对象模型(简称DOM)，是W3C组织推荐的处理可扩展标记语言(HTML或XML)的标准&#x3D;&#x3D;编程接口&#x3D;&#x3D;，通过这些DOM接口可以改变网页的内容、结构、样式。</p><p>包括内容：</p><ul><li>文档：一个页面就是一个文档，DOM中使用<strong>document</strong>表示</li><li>元素：页面中的&#x3D;&#x3D;所有标签&#x3D;&#x3D;都是元素，DOM中使用<strong>element</strong>表示</li><li>节点：页面中的所有内容都是节点(标签、属性、文本、注释等)，DOM中使用<strong>node</strong>表示</li></ul><p><strong>DOM把以上内容都看做是&#x3D;&#x3D;对象&#x3D;&#x3D;</strong></p><h3 id="获取页面元素"><a href="#获取页面元素" class="headerlink" title="获取页面元素"></a>获取页面元素</h3><p>DOM在实际开发中主要用来操作元素</p><p>获取页面中元素可以使用以下几种方式：</p><h4 id="1-获取ID获取"><a href="#1-获取ID获取" class="headerlink" title="1. 获取ID获取"></a>1. 获取ID获取</h4><p><strong><code>getElementById()</code></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(box);  <span class="comment">//获取的是box这个盒子</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>文档是从上往下加载，所以script写到标签的下面</li><li>get获得 element元素 by通过 采用驼峰命名法</li><li>参数id是大小写敏感的字符串</li><li>返回的是一个元素对象</li><li><strong>console.dir()</strong> 打印我们返回的元素对象，更好的查看里面的属性和方法</li></ul><h4 id="2-根据标签名获取"><a href="#2-根据标签名获取" class="headerlink" title="2. 根据标签名获取"></a>2. 根据标签名获取</h4><p><strong><code>getElementByTagName()</code></strong></p><ul><li>可以返回带有指定标签的&#x3D;&#x3D;对象的集合&#x3D;&#x3D;，以&#x3D;&#x3D;伪数组&#x3D;&#x3D;的形式存储</li><li>想要依次打印里面的元素对象可以采取数组遍历的方式</li><li>如果页面中没有元素，返回的是空的伪数组的形式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//依次打印元素    </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i]);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//element.getElementByTagName(&#x27;标签名&#x27;) 获得特定元素下的特定标签名的标签</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//var ol = document.getElementByTagName(&#x27;ol&#x27;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//console.log(ol[0].getElementByTagName(&#x27;li&#x27;));</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ol = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ol&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="title function_">getElementByTagName</span>(<span class="string">&#x27;li&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-通过HTML5新增的方法获取"><a href="#3-通过HTML5新增的方法获取" class="headerlink" title="3. 通过HTML5新增的方法获取"></a>3. 通过HTML5新增的方法获取</h4><blockquote><h5 id="1-getElementByClassName-“类名”"><a href="#1-getElementByClassName-“类名”" class="headerlink" title="1. getElementByClassName(“类名”)"></a>1. getElementByClassName(“类名”)</h5></blockquote><p>根据&#x3D;&#x3D;类名&#x3D;&#x3D;返回元素对象集合</p><blockquote><h5 id="2-querySelector-“选择器”"><a href="#2-querySelector-“选择器”" class="headerlink" title="2. querySelector(“选择器”)"></a>2. querySelector(“选择器”)</h5></blockquote><p>根据&#x3D;&#x3D;指定选择器&#x3D;&#x3D;返回&#x3D;&#x3D;一个&#x3D;&#x3D;元素对象</p><p><strong>里面的选择器需要加符号  <code>.box</code>、<code>#nav</code></strong></p><blockquote><h5 id="3-querySelectorAll-“选择器”"><a href="#3-querySelectorAll-“选择器”" class="headerlink" title="3. querySelectorAll(“选择器”)"></a>3. querySelectorAll(“选择器”)</h5></blockquote><p>根据&#x3D;&#x3D;指定选择器&#x3D;&#x3D;返回&#x3D;&#x3D;所有&#x3D;&#x3D;元素对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> boxs = <span class="variable language_">document</span>.<span class="title function_">getElementByClassName</span>(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boxs);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> firstBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstBox);</span><br><span class="line"><span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#nav&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nav);</span><br><span class="line"><span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> allBox = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(allBox);</span><br><span class="line"><span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span><br></pre></td></tr></table></figure><h4 id="4-特殊元素获取"><a href="#4-特殊元素获取" class="headerlink" title="4. 特殊元素获取"></a>4. 特殊元素获取</h4><ul><li><p>获取body元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>  <span class="comment">//返回body元素</span></span><br></pre></td></tr></table></figure></li><li><p>获取html元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>  <span class="comment">//返回html对象元素</span></span><br></pre></td></tr></table></figure></li></ul><p>1. </p><h3 id="元素操作"><a href="#元素操作" class="headerlink" title="元素操作"></a>元素操作</h3><p>DOM操作可以改变网页内容、结构和样式，可以利用DOM操作元素来改变元素里的内容、属性等</p><h4 id="1-修改元素内容"><a href="#1-修改元素内容" class="headerlink" title="1. 修改元素内容"></a>1. 修改元素内容</h4><blockquote><p>element.innerText</p></blockquote><p>从起始位置到终止位置的内容，但会去除html标签。同时空格和换行也会去掉</p><blockquote><p>element.innerHTML</p></blockquote><p>起始位置到终止位置的全部内容，包括html标签，同时保留空格和换行</p><p>innerText与innerHTML区别：</p><ul><li>innerText不识别html标签(非标准)，innerHTML识别html标签(W3C标准)</li><li>innerText去除空格和换行，innerHTML保留空格和换行</li></ul><h4 id="2-修改元素属性"><a href="#2-修改元素属性" class="headerlink" title="2. 修改元素属性"></a>2. 修改元素属性</h4><blockquote><p>可以修改元素的属性，像元素的id、class、src、href、title等</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divid&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divclass&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/1.jpg&quot;</span><span class="attr">alt</span>=<span class="string">&quot;&quot;</span><span class="attr">title</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">className</span>);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">id</span> = <span class="string">&quot;afterid&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">className</span> = <span class="string">&quot;afterclass&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">className</span>);</span></span><br><span class="line"><span class="language-javascript">        img.<span class="property">src</span> = <span class="string">&#x27;image/2.jpg&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        img.<span class="property">title</span> = <span class="string">&#x27;morning&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-修改表单属性"><a href="#3-修改表单属性" class="headerlink" title="3. 修改表单属性"></a>3. 修改表单属性</h4><blockquote><p>修改表单的<strong>type、value、checked、selected、disabled</strong>属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>= <span class="string">&quot;text&quot;</span><span class="attr">value</span>= <span class="string">&quot;请输入&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1.获取元素        </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//2.注册事件 处理程序</span></span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">value</span> = <span class="string">&quot;after&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            input.<span class="property">innerHTML</span> = <span class="string">&#x27;点击&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//value修改的是表单里面的值innerHTML修改的是普通盒子比如div标签里面的内容</span></span></span><br><span class="line"><span class="language-javascript">            input.<span class="property">value</span> = <span class="string">&#x27;被点击&#x27;</span>；</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//如果想要某个表单被禁用 不能再点击 用disabled，当值为true时即表示禁用     </span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//this指向的是事件函数的调用者button            </span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-修改样式属性"><a href="#4-修改样式属性" class="headerlink" title="4. 修改样式属性"></a>4. 修改样式属性</h4><p>通过JS修改元素的大小、颜色、位置等样式</p><blockquote><h5 id="1-element-style行内样式操作"><a href="#1-element-style行内样式操作" class="headerlink" title="1. element.style行内样式操作"></a>1. element.style行内样式操作</h5></blockquote><blockquote><h5 id="2-element-className类名样式操作"><a href="#2-element-className类名样式操作" class="headerlink" title="2. element.className类名样式操作"></a>2. element.className类名样式操作</h5></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;purple&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;250px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;box change&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：JS修改style样式操作，产生的是行内样式，且样式采用驼峰命名法 ，适用于修改样式较少的情况下，当修改样式较多时，修改类名，并重新用CSS写修改样式(如果要保留原先的类名，可以采用多类型选择器的方法命名)</strong></p><p><img src="https://220678.oss-cn-qingdao.aliyuncs.com/149.png"></p><h4 id="5-自定义属性"><a href="#5-自定义属性" class="headerlink" title="5. 自定义属性"></a>5. 自定义属性</h4><p>自定义属性目的：是为了保存并使用数据。有些数据可以保存到页面中而不用保存到数据库中</p><ul><li>设置元素的属性值</li></ul><blockquote><p>element.属性 &#x3D; ‘值’;<br>element.setAttribute(‘属性’, ‘值’)</p></blockquote><p>H5规定自定义属性打他-开头作为属性名并且赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-index</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">element.setAttribute(&#x27;data-index&#x27;, 2);</span><br></pre></td></tr></table></figure><ul><li>获取元素的属性值</li></ul><blockquote><p>element.属性  &#x2F;&#x2F;获取属性值<br>element.getAttribute(‘属性’);</p></blockquote><p>区别：</p><p>element.属性  获取&#x3D;&#x3D;内置属性值&#x3D;&#x3D;(元素本身自带的属性)</p><p>element.getAttribute(‘属性’); 主要获得&#x3D;&#x3D;自定义的属性值&#x3D;&#x3D;(标准)程序员自己添加的，称为index</p><ul><li>removeAttribute移除自定义属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">id</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>));</span><br><span class="line"><span class="comment">//设置元素值</span></span><br><span class="line"><span class="comment">//(1)element.属性=&#x27;值&#x27;</span></span><br><span class="line">div.<span class="property">id</span> = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">div.<span class="property">className</span> = <span class="string">&#x27;navs&#x27;</span>;</span><br><span class="line"><span class="comment">//(2)element.setAttribute(&#x27;属性&#x27;, &#x27;值&#x27;);主要针对自定义属性</span></span><br><span class="line">div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>);</span><br><span class="line"><span class="comment">//class写的就是class，不是className</span></span><br><span class="line">div.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3><h4 id="1-节点概述"><a href="#1-节点概述" class="headerlink" title="1.节点概述"></a>1.节点概述</h4><p>网页中所有内容都是节点（标签、属性、文本、注释等），在DOM中，节点使用node来表示。HTML DOM树中所有节点均可通过JavaScript进行访问，所有HTML元素（节点）均可被修改，也可以创建和删除</p><h4 id="2-节点操作的原因"><a href="#2-节点操作的原因" class="headerlink" title="2. 节点操作的原因"></a>2. 节点操作的原因</h4><p>获取元素的方法，逻辑性不强，并且获取元素很繁琐。而利用节点层级关系，我们可以利用元素间的父子或兄弟关系更简单的获取，逻辑性更强，缺点就是兼容性稍差。</p><h4 id="3-父子节点"><a href="#3-父子节点" class="headerlink" title="3. 父子节点"></a>3. 父子节点</h4><blockquote><p><strong>1.Node.parentNode 获得Node节点的父节点</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.父节点 parentNode</span></span><br><span class="line"><span class="keyword">var</span> erweima = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.erweima&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="comment">//得到的是离元素最近的父级节点 如果找不到父节点就返回null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(erweima.<span class="property">parentNode</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>2.Node.childNodes[n] 获得Node节点的第n+1个子节点（因为下标从0开始）</strong></p></blockquote><ul><li>firstChild 第一个节点 不管是文本节点还是元素节点</li><li>firstElementChild 返回第一个&#x3D;&#x3D;子元素节点&#x3D;&#x3D;</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">firstChild</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">lastChild</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">firstElementChild</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">lastElementChild</span>);</span><br><span class="line"><span class="comment">//实际开发的写法 既没有兼容性问题又返回第一个子元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">children</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">children</span>[ol.<span class="property">children</span>.<span class="property">length</span>-<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> lis = ul.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="comment">//1.子节点 childNodes 所有的子节点 包含元素节点、文本节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>[<span class="number">0</span>].<span class="property">nodeType</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>[<span class="number">1</span>].<span class="property">nodeType</span>);</span><br><span class="line"><span class="comment">//2.children 获取所有的子元素节点 也是最常用的方式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>);</span><br></pre></td></tr></table></figure><h4 id="4-兄弟节点"><a href="#4-兄弟节点" class="headerlink" title="4. 兄弟节点"></a>4. 兄弟节点</h4><blockquote><p><strong>1.node.previousElementSibling 获得当前元素的上一个兄弟节点</strong></p></blockquote><blockquote><p><strong>2.node.nextElementSibling 获得当前元素的下一个兄弟节点</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> box2 = box1.<span class="property">previousElementSibling</span>;</span><br><span class="line"><span class="keyword">var</span> box3 = box1.<span class="property">nextElementSibling</span>;</span><br></pre></td></tr></table></figure><p>找不到则返回null，包含所有的节点</p><h4 id="5-创建添加节点"><a href="#5-创建添加节点" class="headerlink" title="5. 创建添加节点"></a>5. 创建添加节点</h4><ol><li>创建节点</li></ol><blockquote><p><strong>document.createElement(‘nodeName’)创建一个nodename节点</strong></p></blockquote><ol start="2"><li>添加节点</li></ol><blockquote><p><strong>1.Node.appendchild(child) 给父节点Node添加子节点child</strong></p></blockquote><p>添加到子节点列表&#x3D;&#x3D;末尾&#x3D;&#x3D;</p><blockquote><p><strong>2.Node.insertBefore(child，指定子节点) 给父节点的指定子节点之前添加一个子节点child</strong></p></blockquote><p>将一个节点添加到父节点的&#x3D;&#x3D;指定子节点前面&#x3D;&#x3D;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">creatElement</span>(<span class="string">&#x27;li&#x27;</span>);  <span class="comment">// 创建新的节点元素</span></span><br><span class="line"><span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">ul.<span class="title function_">appendchild</span>(<span class="string">&#x27;li&#x27;</span>);    <span class="comment">//添加节点元素</span></span><br><span class="line"><span class="keyword">var</span> li2 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">ul.<span class="title function_">insertBefore</span>(li2,ul.<span class="property">children</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p><strong>想要页面添加一个新的元素：1. 创建元素 2. 添加元素</strong></p><h4 id="6-删除节点"><a href="#6-删除节点" class="headerlink" title="6. 删除节点"></a>6. 删除节点</h4><blockquote><p><strong>Node.removeChild(‘NodeName’) 删除父节点node的子节点</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ul.<span class="property">children</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        ul.<span class="title function_">removeChild</span>(ul.<span class="property">children</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-复制节点"><a href="#7-复制节点" class="headerlink" title="7. 复制节点"></a>7. 复制节点</h4><blockquote><p><strong>Node.cloneNode(Boolean) 复制Node节点</strong></p></blockquote><p>如果括号里Boolean等于true，则为深拷贝(复制标签及里面的内容)，如果不填或者为false，则为浅拷贝(只复制标签不复制里面的内容)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> copy = box.<span class="title function_">cloneNode</span>();          <span class="comment">//默认：浅拷贝</span></span><br><span class="line"><span class="keyword">var</span> deep = box.<span class="title function_">cloneNode</span>(<span class="literal">true</span>);      <span class="comment">//深拷贝</span></span><br><span class="line"><span class="keyword">var</span> shallow = box.<span class="title function_">cloneNode</span>(<span class="literal">false</span>);  <span class="comment">//浅拷贝</span></span><br><span class="line"><span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> lili = ul.<span class="property">childreb</span>[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span><br><span class="line">ul.<span class="title function_">appendchild</span>(lili);</span><br></pre></td></tr></table></figure><h4 id="8-动态创建元素"><a href="#8-动态创建元素" class="headerlink" title="8. 动态创建元素"></a>8. 动态创建元素</h4><ol><li><p>document.write()</p><p>直接将内容写入页面的内容流，<strong>但是文档流执行完毕，则它会导致页面全部重绘</strong></p></li><li><p>element.innerHTML</p><p>将内容写入某个DOM节点，不会导致页面全部重绘</p><p>创建多个元素效率更高(不要拼接字符串，采取数组形式拼接)，结构稍微复杂</p></li><li><p>document.createElement()</p><p>创建多个元素效率稍低一点，但是结构更清晰</p></li></ol><p><strong>总结：不同浏览器下，&#x3D;&#x3D;innerHTML效率要比createElement高&#x3D;&#x3D;</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.document.write()</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;div&gt;123&lt;/div&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.innerHTML</span></span><br><span class="line"><span class="keyword">var</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">inner.<span class="property">innerHTML</span> = arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="comment">//3.document.createElement()</span></span><br><span class="line"><span class="keyword">var</span> create = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.create&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">create</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    create.<span class="title function_">appendchild</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="x3D-x3D-9-总结-x3D-x3D"><a href="#x3D-x3D-9-总结-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;9.总结&#x3D;&#x3D;"></a>&#x3D;&#x3D;9.总结&#x3D;&#x3D;</h4><table><thead><tr><th align="center">操作</th><th align="left">方式</th></tr></thead><tbody><tr><td align="center">创建</td><td align="left">1. document.write<br/>2. innerHTML<br/>3. createElement</td></tr><tr><td align="center">增</td><td align="left">1. appendChild<br/>2. insertBefore</td></tr><tr><td align="center">删</td><td align="left">1.removeChild</td></tr><tr><td align="center">改</td><td align="left">主要修改dom的元素属性，dom元素的内容、属性，表单的值等<br>1. 修改元素属性：src、href、title等<br>2. 修改普通元素内容：innerHTML、innerText<br>3. 修改表单元素：value、type、disabled等<br>4. 修改元素样式：style、className</td></tr><tr><td align="center">查</td><td align="left">主要获取查询dom的元素<br>1. DOM提供的API方法：getElementByld、getElementsByTagName古老用法不太推荐<br>2. H5提供的新方法：querySelector、.querySelectorAll提倡<br>3. 利用节点操作获取元素：父(parentNode)、子(children)、兄(previousElementSibling、nextElementSibling)提倡</td></tr><tr><td align="center">操作属性</td><td align="left">主要针对于自定义属性<br>1. setAttribute:设置dom的属性值<br>2. getAttribute:得到dom的属性值<br>3. removeAttribute移除属性</td></tr></tbody></table><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><h4 id="1-事件基础"><a href="#1-事件基础" class="headerlink" title="1. 事件基础"></a>1. 事件基础</h4><ol><li>事件的组成：事件源、事件类型、事件处理程序(也称事件三要素)</li></ol><ul><li>事件源    事件被触发的对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>事件类型   如何触发 什么事件</li><li>事件处理程序   通过一个函数赋值的方式完成</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>执行事件的步骤</p><ul><li><p>获取事件源</p></li><li><p>注册事件(绑定事件)</p></li><li><p>添加事件处理程序(函数赋值)</p></li></ul></li></ol><h4 id="2-事件高级"><a href="#2-事件高级" class="headerlink" title="2. 事件高级"></a>2. 事件高级</h4><h5 id="1-注册事件"><a href="#1-注册事件" class="headerlink" title="1. 注册事件"></a>1. 注册事件</h5><p>给元素添加事件，称为注册事件或者绑定事件，有两种方式：&#x3D;&#x3D;传统方式、方法监听注册方式&#x3D;&#x3D;</p><h6 id="1-传统注册方式"><a href="#1-传统注册方式" class="headerlink" title="1. 传统注册方式"></a>1. 传统注册方式</h6><ul><li>利用on开头的事件，如onclick</li><li>可以行内添加，如<code>&lt;button onclick=&quot;alert(&#39;hello world&#39;)&quot;&gt;&lt;/button&gt;</code></li><li>可以封装函数，如btn.onclick()&#x3D;function(){}</li><li>特点：注册事件具有<strong>唯一性</strong>，同一个元素同一个事件只能设置一个处理函数，后注册的函数会覆盖前面注册的函数</li></ul><h6 id="2-方法监听注册方式"><a href="#2-方法监听注册方式" class="headerlink" title="2. 方法监听注册方式"></a>2. 方法监听注册方式</h6><ul><li>W3C标准推荐方式</li><li>通过 <strong>addEventListener(事件属性，事件处理，事件流)</strong> 方法实现</li><li>IE9之前不支持此方法，可使用attachEvent()代替</li><li>特点：同一个元素同一个事件可以注册多个监听器，它们按照注册的顺序依次执行</li></ul><blockquote><p><strong>eventTarget.addEventListener(type, listener, useCapture)</strong></p></blockquote><p>type：事件类型字符串，比如click、mouseover，注意&#x3D;&#x3D;不带on&#x3D;&#x3D;</p><p>listener：事件处理函数，事件反生是，会调研该监听函数</p><p>useCapture：可选参数，是一个布尔值，默认是false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="comment">//1. 传统方式注册事件</span></span><br><span class="line">btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;<span class="comment">//只会弹出hello</span></span><br><span class="line"><span class="comment">//2.事件监听注册事件</span></span><br><span class="line"><span class="comment">//(1)里面的事件类型是字符串 必须加引号 而且不带on</span></span><br><span class="line"><span class="comment">//(2)同一个元素 同一个事件可以添加多个监听器</span></span><br><span class="line">btn[<span class="number">1</span>].<span class="title function_">addEventlistener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">22</span>);</span><br><span class="line">&#125;)</span><br><span class="line">btn[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">33</span>);</span><br><span class="line">&#125;)</span><br><span class="line">btn[<span class="number">1</span>].<span class="title function_">addEvent</span>(<span class="string">&#x27;onclick&#x27;</span>,fn);</span><br><span class="line"><span class="comment">//这里的事件要加on 但函数不用加括号</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">44</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-删除事件"><a href="#2-删除事件" class="headerlink" title="2. 删除事件"></a>2. 删除事件</h5><blockquote><p><strong>1.传统注册方式</strong><br>Event.οnclick&#x3D;null;</p></blockquote><blockquote><p><strong>2.方法监听注册方式</strong><br>Event.removeEventListener(‘click’,fn);</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">divs[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">11</span>);</span><br><span class="line">    divs[<span class="number">0</span>].<span class="property">onclick</span> = <span class="literal">null</span>;   <span class="comment">//传统方式删除事件</span></span><br><span class="line">&#125;</span><br><span class="line">div[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">22</span>);</span><br><span class="line">    divs[<span class="number">1</span>].<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>,fn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-DOM事件流"><a href="#3-DOM事件流" class="headerlink" title="3. DOM事件流"></a>3. DOM事件流</h5><p><strong>事件流</strong>描述的是从页面中接收事件的顺序</p><p>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即DOM事件流</p><p>DOM事件流分为3个阶段：</p><ol><li>捕获阶段</li><li>当前目标阶段</li><li>冒泡阶段</li></ol><p>事件捕获：网景最早提出，由DOM&#x3D;&#x3D;最顶层节点开始&#x3D;&#x3D;，然后逐级向下传播到最具体的元素接收的过程</p><p>事件冒泡：IE最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到DOM最顶层节点的过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.JS代码中只能执行捕获或者冒泡其中的一个阶段</span></span><br><span class="line"><span class="comment">//2.onclick和attachEvent(ie)只能得到冒泡阶段</span></span><br><span class="line"><span class="comment">//3.捕获阶段 如果addEventlistener第三个参数是true 那么则处于捕获阶段 document-&gt;html-&gt;body-&gt;father-&gt;son</span></span><br><span class="line"><span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span><br><span class="line">son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span><br><span class="line">father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p><strong>1. 在实际开发中很少使用事件捕获，更关注事件冒泡</strong></p><p><strong>2.有些事件是没有冒泡的，比如onblur、onfocus、onmouseenter、onmouseleave</strong></p><h5 id="4-事件对象"><a href="#4-事件对象" class="headerlink" title="4. 事件对象"></a>4. 事件对象</h5><ul><li>event就是一个事件对象 写到监听函数的小括号里面 当形参来看</li><li>事件对象只有有了事件才会存在，是系统自动创建的，不需要我们传递参数</li><li>事件对象 是事件的一系列相关数据的集合，跟事件的状态，比如键盘按键状态、鼠标的位置、鼠标按钮的状态</li></ul><p>​       简单理解：事件发生后，<strong>跟事件相关的一系列信息数据的集合</strong>都放到这个对象里面，<strong>这个对象就是事件对象event</strong>，他有很多属性和方法</p><ul><li>这个事件对象也可以自己命名 比如event、e(最常用)</li><li>事件对象也有兼容性问题  通过Windows.event兼容性的写法  e &#x3D; e|| window.event;</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.div&#x27;</span>);</span><br><span class="line">div.<span class="property">onclick</span> = <span class="title function_">finction</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">event</span>);</span><br><span class="line">    e = e || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//div.addEventListener(&#x27;click&#x27;. function(event) &#123;&#125;)</span></span><br><span class="line"><span class="comment">//div.onclick = function(event) &#123;&#125;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">事件对象属性方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">e.target</td><td align="center">返回触发事件的对象   (标准)</td></tr><tr><td align="center">e.srcElement</td><td align="center">返回触发事件的对象   (非标准ie678使用)</td></tr><tr><td align="center">e.type</td><td align="center">返回事件的类型 比如click mouseover不带on</td></tr><tr><td align="center">e.cancelBubble</td><td align="center">该属性阻止冒泡   (非标准ie678使用)</td></tr><tr><td align="center">e.returnValue</td><td align="center">该属性阻止默认事件   (非标准)如不让链接跳转</td></tr><tr><td align="center">e.preventDefault()</td><td align="center">该属性阻止默认事件   (标准)如不让链接跳转</td></tr><tr><td align="center">e.stopPropagation()</td><td align="center">阻止冒泡   (标准)</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. e.target 返回的是触发事件的对象||this返回的是绑定事件的对象</span></span><br><span class="line"><span class="comment">//区别：e.target点击了那个元素 就返回那个元素||this返回绑定事件的元素</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.div&#x27;</span>);</span><br><span class="line">div.<span class="title function_">addEvebtListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>①阻止默认行为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">a.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();  <span class="comment">//阻止默认行为</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>②阻止事件冒泡</p><p>标准写法：利用事件对象里面的stopPropagation()方法</p><blockquote><p><strong>e.stopPropagation()</strong></p></blockquote><p>非标准写法：IE678利用事件对象cancelBubble属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> son = father.<span class="property">children</span>[<span class="number">0</span>];</span><br><span class="line">father.<span class="title function_">addElementListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">son.<span class="title function_">addElementListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>③事件委托</p><p>原理：不是每个子节点单独设置事件监听器，而是将事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点</p><p>以上案例：给ul注册点击事件，然后利用事件对象的target来找到当前点击的Ii,因为点击Ii,事件会冒泡到ul上有注册事件，就会触发事件监听器</p><p>作用：只操作了一次DOM，提高了程序的性能</p><h5 id="5-常用鼠标事件"><a href="#5-常用鼠标事件" class="headerlink" title="5. 常用鼠标事件"></a>5. 常用鼠标事件</h5><table><thead><tr><th align="center">鼠标事件</th><th align="center">触发条件</th></tr></thead><tbody><tr><td align="center">onclick</td><td align="center">鼠标点击左键触发</td></tr><tr><td align="center">onmouseover</td><td align="center">鼠标经过触发</td></tr><tr><td align="center">onmouseout</td><td align="center">鼠标离开触发</td></tr><tr><td align="center">onfocus</td><td align="center">获得鼠标焦点触发</td></tr><tr><td align="center">onblur</td><td align="center">失去鼠标焦点触发</td></tr><tr><td align="center">onmousemove</td><td align="center">鼠标移动触发</td></tr><tr><td align="center">onmouseup</td><td align="center">鼠标弹起触发</td></tr><tr><td align="center">onmousedown</td><td align="center">鼠标按下触发</td></tr></tbody></table><p><strong>&#x3D;&#x3D;使用监听注册时去掉前面 ‘on’&#x3D;&#x3D;</strong></p><ol><li>禁止鼠标右键菜单</li></ol><blockquote><p>contextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</p><p>document.addEventListener(‘contextmenu’, function(e) {</p><p>​e.preventDefault();</p><p>})</p></blockquote><ol start="2"><li>禁止鼠标选中</li></ol><blockquote><p>document.addEventListener(‘selectstart’, function(e) {</p><p>​e.preventDefault();</p><p>})</p></blockquote><ol start="3"><li>获得鼠标坐标</li></ol><table><thead><tr><th align="center">鼠标事件</th><th align="center">触发条件</th></tr></thead><tbody><tr><td align="center">e.clientX</td><td align="center">返回浏览器相对于浏览器窗口可视区的X坐标</td></tr><tr><td align="center">e.clientY</td><td align="center">返回浏览器相对于浏览器窗口可视区的Y坐标</td></tr><tr><td align="center">e.pageX</td><td align="center">返回鼠标相对于文档页面的X坐标 (IE9+支持）</td></tr><tr><td align="center">e.pageY</td><td align="center">返回鼠标相对于文档页面的Y坐标 (IE9+支持）</td></tr><tr><td align="center">e.screenX</td><td align="center">返回鼠标相对于电脑屏幕的X坐标</td></tr><tr><td align="center">e.screenY</td><td align="center">返回鼠标相对于电脑屏幕的Y坐标</td></tr></tbody></table><ol start="4"><li>常用键盘事件</li></ol><table><thead><tr><th align="center">键盘事件</th><th align="center">触发条件</th></tr></thead><tbody><tr><td align="center">onkeyup</td><td align="center">某个键盘按键被松开时触发</td></tr><tr><td align="center">onkeydown</td><td align="center">某个键盘按键被按下时触发</td></tr><tr><td align="center">onkeypress</td><td align="center">某个键盘按键被按下时触发 <strong>但是它不识别功能键 ctrl shift等</strong></td></tr></tbody></table><p><strong>当按下一个按键再松开时，三个事件的执行顺序依次为：<br>onkeydown -&gt;onkeypress-&gt;onkeyup</strong></p><p><strong>&#x3D;&#x3D;使用监听注册时去掉前面 ‘on’&#x3D;&#x3D;</strong></p><p>键盘事件对象属性：keyCode</p><p>说明：返回该键的ASCII值</p><p>注意：</p><ol><li>keyup和keydown事件不区分字母大小写，如a和A得到的都是65</li><li>keypress事件区分字母大小写</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2023/01/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2023/01/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="测试正则表达式"><a href="#测试正则表达式" class="headerlink" title="测试正则表达式"></a>测试正则表达式</h3><p><code>test()</code>正则对象方法，用于检测字符串是否符合该规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">regexObj.<span class="title function_">test</span>(str)</span><br><span class="line"><span class="comment">//用来检测str文本是否符合正则表达式规范</span></span><br></pre></td></tr></table></figure><h3 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h3><p>用来提示字符所处的位置，主要有两个字符</p><p><code>^</code>     表示匹配行首的文本(以谁开始)</p><p><code>$</code>     表示匹配行尾的文本(以谁结束)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rg = <span class="regexp">/abc/</span>;  <span class="comment">//正则表达式里面不需要加引号，不管是数字型还是字符串型</span></span><br><span class="line"><span class="comment">//  /abc/ 只要包含abc这个字符串返回的都是true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;abcd&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;aabcd&#x27;</span>));</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^abc/</span>;</span><br><span class="line"><span class="comment">// /^abc/必须以abc字符串开头</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abcd&#x27;</span>));  <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aabcd&#x27;</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/^abc$/</span>;</span><br><span class="line"><span class="comment">// 精准匹配，要求必须是abc字符串才符合规范</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));    <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;aabcd&#x27;</span>));  <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abcabc&#x27;</span>))  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p><code>[]</code>表示有一系列字符可供选择，只要匹配其中一个即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rg = <span class="regexp">/[abc]/</span>;   <span class="comment">//只要包含a或b或c都返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;andy&#x27;</span>));  <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;boy&#x27;</span>));   <span class="comment">//true</span></span><br><span class="line"><span class="keyword">let</span> rg1 = <span class="regexp">/^[abc]$/</span>;<span class="comment">//三选一  只有是a或b或c这三个字母才返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;aa&#x27;</span>));   <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>));    <span class="comment">//true</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^[a-z]$/</span>;<span class="comment">//26个英文字母任何一个字母都返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;z&#x27;</span>));    <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));    <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>如果&#x3D;&#x3D;中括号&#x3D;&#x3D;里面有^表示取反的意思</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg2 = <span class="regexp">/^[^a-zA-Z0-9_-]$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));   <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;!&#x27;</span>));   <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;-&#x27;</span>));   <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="量词符"><a href="#量词符" class="headerlink" title="量词符"></a>量词符</h3><p>用来设定某个模式出现的次数</p><table><thead><tr><th align="center">符号</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">相当于&gt;&#x3D;0 可以出现0次或多次</td></tr><tr><td align="center">+</td><td align="center">相当于&gt;&#x3D;1 可以出现1次或很多次</td></tr><tr><td align="center">？</td><td align="center">相当于 1||0</td></tr><tr><td align="center">{3 }</td><td align="center">就是出现3次</td></tr><tr><td align="center">{3，}</td><td align="center">大于等于3次</td></tr><tr><td align="center">{3,16}</td><td align="center">大于等于3 并且小于等于16</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>;</span><br><span class="line"><span class="comment">//用户只能输入英文字母 数字 下划线 短横线</span></span><br><span class="line"><span class="comment">//&#123;6,16&#125;中间不要有空格</span></span><br></pre></td></tr></table></figure><h3 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h3><p>预定义类指的是某些常见模式的简写方式</p><table><thead><tr><th>预定义类</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配0-9之间的&#x3D;&#x3D;任意一个&#x3D;&#x3D;数字，相当于[0-9]</td></tr><tr><td>\D</td><td>匹配所有0-9以外的字符</td></tr><tr><td>\w</td><td>匹配任意的字母、数字、下划线，相当于[A-Za-z0-9_-]</td></tr><tr><td>\W</td><td>匹配除所有字母、数字、下划线以外的字符</td></tr><tr><td>\s</td><td>匹配空格(包括换行符、制表符、空格)</td></tr><tr><td>\S</td><td>匹配非空格的字符</td></tr></tbody></table><h3 id="正则表达式参数"><a href="#正则表达式参数" class="headerlink" title="正则表达式参数"></a>正则表达式参数</h3><p><code>/表达式/[switch]</code></p><p>switch(也称为修饰符)按照什么样的模式来匹配，有三种值</p><ul><li>g：全局匹配</li><li>i：忽略大小写</li><li>gi：全局匹配+忽略大小写</li></ul><h3 id="replace替换"><a href="#replace替换" class="headerlink" title="replace替换"></a>replace替换</h3><p><code>replace()</code>方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或者是一个正则表达式</p><p><code>stringObject.replace(regexp/substr,replacement)</code></p><ol><li>第一个参数：被替换的字符串或者正则表达式</li><li>第二个参数：替换为的字符串</li><li>返回值是一个替换完毕的新字符串</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>新年快乐</title>
      <link href="/2023/01/01/4/"/>
      <url>/2023/01/01/4/</url>
      
        <content type="html"><![CDATA[<p>file:&#x2F;&#x2F;&#x2F;C:&#x2F;Users&#x2F;www&#x2F;Desktop&#x2F;%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20(2)&#x2F;index.html</p>]]></content>
      
      
      <categories>
          
          <category> 碎片 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客</title>
      <link href="/2022/12/27/3/"/>
      <url>/2022/12/27/3/</url>
      
        <content type="html"><![CDATA[<p>这几天，通过从网上寻找各种搭建教程，不断尝试，再删除，再尝试，我终于战战兢兢的搭建了自己简陋的博客系统，这里放上网址，欢迎大家的访问哦</p><p><a href="https://cat711.github.io/">https://cat711.github.io/</a></p><h4 id="环境与工作准备"><a href="#环境与工作准备" class="headerlink" title="环境与工作准备"></a>环境与工作准备</h4><p>需要安装的程序（相信大家都有）</p><ul><li><p>Node</p><ul><li><p>下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p></li><li><p>打开CMD窗口，运行如下命令,修改npm源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Git</p></li><li><p>Hexo</p><ul><li><p>新建一个文件夹，在git bash执行命令安装hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>安装完后输入hexo -v验证是否安装成功，若出现版本号则表明安装成功</p></li></ul></li><li><p>github配置</p><ul><li><p>点击右上角的<code>+</code>按钮，选择<code>New repository</code>,创建一个<code>&lt;用户名&gt;.github.io</code>的仓库,选项同之前创建仓库相同</p></li><li><p>在git bash窗口<code>ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code>在C盘的用户文件夹下的.ssh文件夹，会看到id_rsa.pub</p></li><li><p>将公钥复制到github</p><ul><li><p>进入github，点击右上角头像 选择<code>settings</code>，进入设置页后选择 <code>SSH and GPG keys</code>，名字随便起，公钥填到<code>Key</code>那一栏</p><p><img src="https://220678.oss-cn-qingdao.aliyuncs.com/Snipaste_2022-12-27_17-16-08.png"></p></li><li><p>测试连接，输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>出现连接到账户的信息，此时完成了环境准备工作</p></li></ul></li></ul></li></ul><h4 id="初始化Hexo项目"><a href="#初始化Hexo项目" class="headerlink" title="初始化Hexo项目"></a>初始化Hexo项目</h4><ol><li><p>在新建的文件夹的git bash下执行<code>hexo init blog-demo(项目名)</code>命令，进行<code>hexo init</code>初始化项目</p></li><li><p>进入<code>blog-demo</code> ，输入<code>npm i</code>安装相关依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog-demo  //进入blog-demo文件夹</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><ol start="3"><li>项目初始化后，博客的框架已经在文件夹中了</li><li>输入hexo server或hexo s启动项目</li><li>打开浏览器，输入地址<a href="http://localhost:4000/">http://localhost:4000/</a>   看到以下效果，说明博客已经初步搭建成功</li></ol></li></ol><p><img src="https://220678.oss-cn-qingdao.aliyuncs.com/Snipaste_2022-12-27_17-29-38.png"></p><h4 id="将静态博客挂载到github-page"><a href="#将静态博客挂载到github-page" class="headerlink" title="将静态博客挂载到github page"></a>将静态博客挂载到github page</h4><ol><li>安装hexo-deployer-git</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="2"><li>修改_config.yml文件</li></ol><p>在blog-demo目录下的_config.yml，修改最后一行的配置，将repository修改为你自己的github项目地址即可，还有分支要改为<code>main</code>代表主分支（注意缩进）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:Fomalhaut-Blog/Fomalhaut-Blog.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><ol start="3"><li>修改好配置后。运行如下命令，将代码部署到github</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  // Git BASH终端</span><br><span class="line">hexo clean; hexo generate; hexo deploy  // VSCODE终端</span><br></pre></td></tr></table></figure><ul><li>hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令。</li><li>hexo generate：生成静态文章，可以用<code>hexo g</code>缩写</li><li>hexo deploy：部署文章，可以用<code>hexo d</code>缩写</li></ul><p>如果出现<code>Deploy done</code>，则说明部署成功了</p><p>此时，就可以打开浏览器访问<a href="https://fomalhaut-blog.github.io/">https:&#x2F;&#x2F;&lt;用户名&gt;.github.io</a>，这时就可以看到博客内容了</p><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><p>在git bash窗口执行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure><p>安装成功之后可以在【C:&#x2F;Hexo-Blog&#x2F;blog-demo&#x2F;node_modules】文件夹下找到hexo-theme-butterfly文件夹</p><h4 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h4><ol><li>修改站点配置文件<code>_config.yml</code>，把主题改为<code>butterfly</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><ol start="2"><li>如果你没有<code>pug</code>以及<code>stylus</code>的渲染器，请下载安装，这两个渲染器是<code>Butterfly</code>生成基础页面所需的依赖包</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><ol start="3"><li>把主题文件夹中的 <code>_config.yml</code> 复制到 Hexo 根目录里，同时重新命名为 <code>_config.butterfly.yml</code>。以后只需要在 <code>_config.butterfly.yml</code>进行配置即可生效</li></ol><h4 id="基本用法说明"><a href="#基本用法说明" class="headerlink" title="基本用法说明"></a>基本用法说明</h4><ol><li><h5 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h5></li></ol><ul><li>Page Front-matter 用于页面配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">写法</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">title</td><td align="center">【必需】页面标题</td></tr><tr><td align="center">date</td><td align="center">【必需】页面创建日期</td></tr><tr><td align="center">type</td><td align="center">【必需】标籤、分类和友情链接三个页面需要配置</td></tr></tbody></table><ul><li>Post Front-matter 用于文章页配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">写法</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">title</td><td align="center">【必需】文章标题</td></tr><tr><td align="center">date</td><td align="center">【必需】文章创建日期</td></tr><tr><td align="center">updated</td><td align="center">【可选】文章更新日期</td></tr><tr><td align="center">tags</td><td align="center">【可选】文章标籤</td></tr></tbody></table><ol start="2"><li><h5 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h5></li></ol><ul><li><p>打开<code>Git Bash</code>执行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure></li><li><p>在<code>[BlogRoot]\source\</code>会生成一个含有<code>index.md</code>文件的<code>tags</code>文件夹</p></li><li><p>修改<code>[BlogRoot]\source\tags\index.md</code>，添加<code>type: &quot;tags&quot;</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2022-10-28 12:00:00</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ol start="3"><li><h5 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h5></li></ol><p>修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改站点配置文件<code>_config.yml</code></p><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">title</td><td align="center">网站标题</td></tr><tr><td align="center">subtitle</td><td align="center">描述</td></tr><tr><td align="center">description</td><td align="center">网站描述</td></tr><tr><td align="center">keywords</td><td align="center">网站的关键词。支持多个关键词</td></tr><tr><td align="center">author</td><td align="center">您的名字</td></tr><tr><td align="center">language</td><td align="center">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</td></tr><tr><td align="center">timezone</td><td align="center">网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America&#x2F;New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia&#x2F;Shanghai</td></tr></tbody></table><ol start="4"><li><h5 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h5></li></ol><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  Home: / || fas fa-home</span><br><span class="line">  Archives: /archives/ || fas fa-archive</span><br><span class="line">  Tags: /tags/ || fas fa-tags</span><br><span class="line">  Categories: /categories/ || fas fa-folder-open</span><br><span class="line">  List||fas fa-list:</span><br><span class="line">    Music: /music/ || fas fa-music</span><br><span class="line">    Movie: /movies/ || fas fa-video</span><br><span class="line">  Link: /link/ || fas fa-link</span><br><span class="line">  About: /about/ || fas fa-heart</span><br></pre></td></tr></table></figure><p>必须是 <code>/xxx/</code>，后面<code>||</code>分开，然后写图标名，如果不想显示图标，图标名可不写</p><ol start="5"><li><h5 id="文章置顶与封面"><a href="#文章置顶与封面" class="headerlink" title="文章置顶与封面"></a>文章置顶与封面</h5></li></ol><ul><li><p>你可以直接在文章的<code>front-matter</code>区域里添加<code>sticky: 1</code>属性来把这篇文章置顶。数值越大，置顶的优先级越大</p></li><li><p>文章的markdown文档上，在<code>Front-matter</code>添加<code>cover</code>，并填上要显示的图片地址。如果不配置<code>cover</code>，可以设置显示默认的<code>cover</code>；如果不想在首页显示cover，可以设置为<code>false</code>。<br>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cover:</span><br><span class="line">  # 是否显示文章封面</span><br><span class="line">  index_enable: true</span><br><span class="line">  aside_enable: true</span><br><span class="line">  archives_enable: true</span><br><span class="line">  # 封面显示的位置</span><br><span class="line">  # 三个值可配置 left , right , both</span><br><span class="line">  position: both</span><br><span class="line">  # 当没有设置cover时，默认的封面显示</span><br><span class="line">  default_cover: </span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li><h5 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h5></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  img: /assets/head.jpg</span><br><span class="line">  effect: false # true则会一直转圈</span><br></pre></td></tr></table></figure><ol start="7"><li><h5 id="网站背景"><a href="#网站背景" class="headerlink" title="网站背景"></a>网站背景</h5></li></ol><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 图片格式 url(http://xxxxxx.com/xxx.jpg)</span><br><span class="line"># 颜色（HEX值/RGB值/颜色单词/渐变色)</span><br><span class="line"># 留空 不显示背景</span><br><span class="line">background: url(https://source.fomal.cc/img/dm1.webp)</span><br></pre></td></tr></table></figure><ol start="8"><li><h5 id="副标题设置"><a href="#副标题设置" class="headerlink" title="副标题设置"></a>副标题设置</h5></li></ol><p>可设置主页中显示的网站副标题或者喜欢的座右铭。</p><p>修改主题配置文件<code>_config.butterfly.yml</code>中的<code>subtitle</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># the subtitle on homepage (主頁subtitle)</span><br><span class="line">subtitle:</span><br><span class="line">  enable: true</span><br><span class="line">  # Typewriter Effect (打字效果)</span><br><span class="line">  effect: true</span><br><span class="line">  # loop (循環打字)</span><br><span class="line">  loop: true</span><br><span class="line">  # source 調用第三方服務</span><br><span class="line">  # source: false 關閉調用</span><br><span class="line">  # source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/</span><br><span class="line">  # source: 2  調用一句網（簡體） http://yijuzhan.com/</span><br><span class="line">  # source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/</span><br><span class="line">  # subtitle 會先顯示 source , 再顯示 sub 的內容</span><br><span class="line">  source: false</span><br><span class="line">  # 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字</span><br><span class="line">  sub:</span><br><span class="line">    - &quot;Welcome to ...&quot;</span><br><span class="line">    - &quot;Hope you have a nice day&quot;</span><br></pre></td></tr></table></figure><h4 id="一些问题的解决"><a href="#一些问题的解决" class="headerlink" title="一些问题的解决"></a>一些问题的解决</h4><h6 id="1-端口问题"><a href="#1-端口问题" class="headerlink" title="1.端口问题"></a>1.端口问题</h6><p>多次调试hexo时可能会多次开关端口，可能会出现端口以被占用的问题</p><p>此时，先用管理员身份打开命令窗口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -o -n -a | findstr :4000</span><br></pre></td></tr></table></figure><p>查看4000端口的详细情况</p><p><img src="https://220678.oss-cn-qingdao.aliyuncs.com/Snipaste_2022-12-27_18-24-17.png"></p><p>将4000端口的进程结束掉</p><p>使用如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /F /PID 3628</span><br></pre></td></tr></table></figure><p>这样就可以结束掉端口，然后重新接入端口</p><h6 id="2-依赖包问题"><a href="#2-依赖包问题" class="headerlink" title="2.依赖包问题"></a>2.依赖包问题</h6><p>git bash命令如果执行不理想的话。可以在终端运行，也可以在vscode上的终端运行，更快捷</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>博客技术来源</title>
      <link href="/2022/12/27/2/"/>
      <url>/2022/12/27/2/</url>
      
        <content type="html"><![CDATA[<div align=center class="aspect-ratio">    <iframe src="https://player.bilibili.com/player.html?aid=474023258&&page=1&as_wide=1&high_quality=1&danmaku=0"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     high_quality=1    danmaku=1     allowfullscreen="true">     </iframe></div>]]></content>
      
      
      <categories>
          
          <category> 他山之石 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记</title>
      <link href="/2022/12/26/JavaScript%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2022/12/26/JavaScript%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript学习总结"><a href="#JavaScript学习总结" class="headerlink" title="JavaScript学习总结"></a>JavaScript学习总结</h2><h3 id="基本概念及作用"><a href="#基本概念及作用" class="headerlink" title="基本概念及作用"></a>基本概念及作用</h3><ul><li>概念：JavaScript 是一种解释性脚本语言，是可插入 HTML 页面的编程代码，可由所有的现代浏览器执行</li><li>作用：<ul><li>表单动态校验（密码强度检测）(S产生最初的目的)</li><li>网页特效</li><li>服务端开发(Node.js)</li><li>桌面程序(Electron)</li><li>App(Cordova)</li><li>控制硬件-物联网</li><li>游戏开发</li></ul></li><li>HTML&#x2F;CSS&#x2F;JS的关系<ul><li>HTML决定网页结构和内容（决定看到什么）</li><li>CSS决定网页呈现给用户的模样(决定好不好看)</li><li>实现业务逻辑和页面控制（决定功能）</li></ul></li></ul><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="1-内嵌JavaScript"><a href="#1-内嵌JavaScript" class="headerlink" title="1.  内嵌JavaScript"></a>1.  内嵌JavaScript</h4><ul><li>放在<code>&lt;script&gt;&lt;/script&gt;</code>双标签中，<code>&lt;script&gt;</code>标签可以放在<code>&lt;head&gt;</code>中，也可以放在<code>&lt;body&gt;</code>中，放在最后也可以</li></ul><h4 id="2-外部JavaScript文件"><a href="#2-外部JavaScript文件" class="headerlink" title="2. 外部JavaScript文件"></a>2. 外部JavaScript文件</h4><ul><li><p>可以把脚本保存到外部文件中。外部文件通常包含被多个网页使用的代码。外部 JavaScript 文件的文件扩展名是 .js</p></li><li><p>当我们使用外部文件时，在HTML页面的script 标签的 “src” 属性中设置该 .js 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/myScript.js&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>适合于JS代码量比较的的情况</p><p><strong>外部脚本不能包含<code>script</code>标签</strong></p></li></ul><h4 id="3-行内式JavaScript"><a href="#3-行内式JavaScript" class="headerlink" title="3. 行内式JavaScript"></a>3. 行内式JavaScript</h4><ul><li>直接编写在HTML标签的一些属性中，用于简单的JavaScript代码的编写，用的偏少</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;ok&#x27;)&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript输入输出语句"><a href="#JavaScript输入输出语句" class="headerlink" title="JavaScript输入输出语句"></a>JavaScript输入输出语句</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th><th align="center">归属</th></tr></thead><tbody><tr><td align="center">alert(msg)</td><td align="center">浏览器弹出&#x3D;&#x3D;警示框&#x3D;&#x3D;</td><td align="center">浏览器</td></tr><tr><td align="center">console.log(msg)</td><td align="center">浏览器&#x3D;&#x3D;控制台&#x3D;&#x3D;打印输出信息</td><td align="center">浏览器</td></tr><tr><td align="center">prompt(info)</td><td align="center">浏览器弹出&#x3D;&#x3D;输入框&#x3D;&#x3D;，用户可以输入</td><td align="center">浏览器</td></tr></tbody></table><h3 id="JavaScript基本语法"><a href="#JavaScript基本语法" class="headerlink" title="JavaScript基本语法"></a>JavaScript基本语法</h3><h4 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h4><ul><li><h5 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h5><ul><li><p>声明变量的关键字：var</p><p>var是一个JS关键字，用来声明变量(variable变量的意思)。使用该关键字声明变量后，计算机会自动为变量分配内存空间</p></li><li><p>用法：语法:var 变量名称;</p></li></ul></li><li><p><strong>赋值</strong>  用&#x3D;来把右边的值赋给左边的变量空间中</p></li><li><h5 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h5><ul><li>由字母(A-Z-z)、数字0-9)、下划线()、美元符号($)组成</li><li>严格区分大小写。var app;和var App;是两个变量</li><li>不能以数字开头</li><li>不能是关键字、保留字</li><li>变量名必须有意义</li><li>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写</li></ul></li><li><h5 id="变量的数据类型"><a href="#变量的数据类型" class="headerlink" title="变量的数据类型"></a>变量的数据类型</h5><ul><li>变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中</li><li>JavaScript是一种弱类型或者说动态语言，不用提前声明变量的类型，在程序运行过程中，类型会<br>被自动确定</li><li>在代码运行时，变量的数据类型是由S引擎根据&#x3D;右边变量值的数据类型来判断的，运行完毕之后，变量就确定了数据类型。</li></ul></li></ul><h4 id="2-语句"><a href="#2-语句" class="headerlink" title="2. 语句"></a>2. 语句</h4><ul><li>一般一行只写一条语句，每句结尾编写分号结束</li><li>运算符的两边以及括号的两边要空开一个位置</li></ul><h3 id="JavaScript的简单数据类型"><a href="#JavaScript的简单数据类型" class="headerlink" title="JavaScript的简单数据类型"></a>JavaScript的简单数据类型</h3><table><thead><tr><th align="center">简单数据类型</th><th align="center">说明</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">Number</td><td align="center">数字型，包含整型值和浮点型值，如21、0.21</td><td align="center">0</td></tr><tr><td align="center">Boolean</td><td align="center">布尔值类型，如true、false,等价于1和0</td><td align="center">false</td></tr><tr><td align="center">String</td><td align="center">字符串类型,字符串可以是引号中的任意文本。必须使用单引号或双引号</td><td align="center">“ “</td></tr><tr><td align="center">Undefined</td><td align="center">var a;声明了变量a但是没有给值，此时a&#x3D;undefined</td><td align="center">undefined</td></tr><tr><td align="center">Null</td><td align="center">var a&#x3D;null;声明了变量a为空值</td><td align="center">null</td></tr></tbody></table><h4 id="1-数值型三个特殊值"><a href="#1-数值型三个特殊值" class="headerlink" title="1. 数值型三个特殊值"></a>1. 数值型三个特殊值</h4><ul><li><p>Infinity,代表无穷大，大于任何数值</p></li><li><p>-Infinity,代表无穷小，小于任何数值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="title class_">Infinity</span>);   <span class="comment">//Infinity</span></span><br><span class="line"><span class="title function_">alert</span>(-<span class="title class_">Inifinity</span>); <span class="comment">//-Infinity</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">NaN</span>);        <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure></li><li><p>NaN ,Not a number,代表一个非数值</p><ul><li><p>**isNaN()**用来判断一个变量是否为非数字的类型</p><p><code>isNaN(x)</code>若x是数字，返回false,若x不是数字，则返回true</p></li></ul></li></ul><h4 id="2-Boolean布尔值类型"><a href="#2-Boolean布尔值类型" class="headerlink" title="2. Boolean布尔值类型"></a>2. Boolean布尔值类型</h4><ul><li><p>布尔型和数字型相加的时候，true的值为1，false的值为0</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> +<span class="number">1</span>);   <span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> +<span class="number">1</span>);  <span class="comment">//1</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-String字符串型"><a href="#3-String字符串型" class="headerlink" title="3. String字符串型"></a>3. String字符串型</h4><ul><li><h5 id="字符串转义符"><a href="#字符串转义符" class="headerlink" title="字符串转义符"></a>字符串转义符</h5></li></ul><table><thead><tr><th align="center">转义符</th><th align="center">解释说明</th></tr></thead><tbody><tr><td align="center">\n</td><td align="center">换行符</td></tr><tr><td align="center">\</td><td align="center">斜杠\</td></tr><tr><td align="center">\‘</td><td align="center">‘单引号</td></tr><tr><td align="center">\&#39;‘</td><td align="center">‘’双引号</td></tr><tr><td align="center">\t</td><td align="center">tab缩进</td></tr><tr><td align="center">\b</td><td align="center">空格</td></tr></tbody></table><ul><li><h5 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h5><ul><li><p>字符串是由若干字符组成的，这些字符的数量就是字符串的长度</p></li><li><p>通过字符串的&#x3D;&#x3D;length&#x3D;&#x3D;属性可以获取整个字符串的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(str.<span class="property">length</span>);  <span class="comment">//显示str字符串的长度</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><ul><li><p>多个字符串之间可以使用+进行拼接，其拼接方式为&#x3D;&#x3D;字符串+任何类型&#x3D;拼接之后的新字符串&#x3D;&#x3D;</p></li><li><p>拼接前会把&#x3D;&#x3D;与字符串相加&#x3D;&#x3D;的&#x3D;&#x3D;任何类型&#x3D;&#x3D;转成&#x3D;&#x3D;字符串&#x3D;&#x3D;，再拼接成一个新的字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串“相加”</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>+<span class="string">&#x27;&#x27;</span>+<span class="string">&#x27;world&#x27;</span>);  <span class="comment">//hello world</span></span><br><span class="line"><span class="comment">//数值与字符串“相加”</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;100&#x27;</span>+<span class="string">&#x27;100&#x27;</span>);  <span class="comment">//100100</span></span><br><span class="line"><span class="comment">//数值字符串+数值</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;11&#x27;</span>+<span class="number">12</span>);  <span class="comment">//1112</span></span><br></pre></td></tr></table></figure></li><li><p>通常将字符串和变量来拼接，因为变量可以很方便的修改里面的值，&#x3D;&#x3D;变量是不能添加引号的&#x3D;&#x3D;，因为加引号的变量会变成字符串</p></li></ul></li></ul><h4 id="4-Undefined"><a href="#4-Undefined" class="headerlink" title="4. Undefined"></a>4. Undefined</h4><ul><li><p>一个声明后没有被赋值的变量会有一个默认值undefined(如果进行相连或者相加时，注意结果)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> variable;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(variable);        <span class="comment">//undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span> + variable)； <span class="comment">//你好undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span> + variable);     <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure></li><li><p>会出现undefined的值的情况</p><ul><li><p>变量声明且没有赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj; </span><br><span class="line"><span class="title function_">alert</span>(obj);<span class="comment">//obj值为undefined</span></span><br></pre></td></tr></table></figure></li><li><p>获取对象中不存在的属性时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj;</span><br><span class="line"><span class="title function_">alert</span>(obj.<span class="property">name</span>);<span class="comment">//报错信息: &quot;Uncaught TypeError: Cannot read property &#x27;name&#x27; of undefined&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>函数需要实参，但是调用时没有传值，形参是undefined</p></li><li><p>函数调用没有返回值或者return后没有数据，接收函数返回的变量是undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printNum</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result=<span class="title function_">printNum</span>();<span class="comment">//调用函数未传递参数，执行函数的时候num的值是undefined alert(result);</span></span><br><span class="line"><span class="comment">//result的值也是undefined，因为printNum()没有返回值</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="5-Null"><a href="#5-Null" class="headerlink" title="5. Null"></a>5. Null</h4><ul><li><p>一个声明变量给null值，里面存的值为空</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vari = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span> + vari);   <span class="comment">//你好null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span> + vari);      <span class="comment">//11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> + vari);    <span class="comment">//1</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="6-查询变量类型"><a href="#6-查询变量类型" class="headerlink" title="6. 查询变量类型"></a>6. 查询变量类型</h4><p><code>typeof</code> + 变量名</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num);   <span class="comment">//number</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str);   <span class="comment">//string</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> flag);  <span class="comment">//boolean</span></span><br><span class="line"><span class="keyword">var</span> vari = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> vari);  <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> timer); <span class="comment">//object</span></span><br></pre></td></tr></table></figure><h4 id="7-数据类型转换"><a href="#7-数据类型转换" class="headerlink" title="7. 数据类型转换"></a>7. 数据类型转换</h4><p>使用表单、prompt获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，就是把一种数据类型的变量转换成另外一种数据类型。</p><p>通常会实现3种方式的转换：</p><h5 id="1-转换为字符串类型"><a href="#1-转换为字符串类型" class="headerlink" title="1. 转换为字符串类型"></a>1. 转换为字符串类型</h5><table><thead><tr><th align="center">方式</th><th align="center">说明</th><th align="center">案例</th></tr></thead><tbody><tr><td align="center">toString()</td><td align="center">转换成字符串</td><td align="center">var num &#x3D;1; alert(num.toString());</td></tr><tr><td align="center">String()强制转换</td><td align="center">转换成字符串</td><td align="center">var num &#x3D; 1; alert(String(num));</td></tr><tr><td align="center"><strong>加号拼接字符串</strong></td><td align="center">和字符串拼接的结果都是字符串</td><td align="center">var num &#x3D;1; alert(num+” “)</td></tr></tbody></table><h5 id="2-转换为数字型"><a href="#2-转换为数字型" class="headerlink" title="2. 转换为数字型"></a>2. 转换为数字型</h5><table><thead><tr><th align="center">方式</th><th align="center">说明</th><th align="center">案例</th></tr></thead><tbody><tr><td align="center">parseInt(string)函数</td><td align="center">将string类型转成整数数值型</td><td align="center">parseInt(‘78’)</td></tr><tr><td align="center">parseFloat(string)函数</td><td align="center">将string类型转成浮点数值型</td><td align="center">parseFloat(‘78.21’)</td></tr><tr><td align="center">Number()强制转换函数</td><td align="center">将string类型转换成数值型</td><td align="center">Number(‘12’)</td></tr><tr><td align="center">js隐式转换（- * &#x2F;)</td><td align="center">l利用算术运算符隐式转换为数值型</td><td align="center">‘12’-0</td></tr></tbody></table><h5 id="3-转换为布尔型"><a href="#3-转换为布尔型" class="headerlink" title="3. 转换为布尔型"></a>3. 转换为布尔型</h5><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>Boolean()函数</td><td>其他类型转成布尔值</td><td>Boolean(‘true’);</td></tr></tbody></table><p>代表空、否定的值会被转换为false,如”、0、NaN、null、undefined,其余值都会被转换为true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27; &#x27;</span>));         <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="number">0</span>));           <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="title class_">NaN</span>));         <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">null</span>));        <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">undefined</span>));   <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;小白&#x27;</span>));       <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="number">12</span>));          <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="8-JavaScript中数值的最大和最小值"><a href="#8-JavaScript中数值的最大和最小值" class="headerlink" title="8. JavaScript中数值的最大和最小值"></a>8. JavaScript中数值的最大和最小值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">a1ert</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>);<span class="comment">//1.7976931348623157e+308</span></span><br><span class="line">alert (<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>);<span class="comment">//5e-324</span></span><br></pre></td></tr></table></figure><h3 id="标识符、关键字和保留字"><a href="#标识符、关键字和保留字" class="headerlink" title="标识符、关键字和保留字"></a>标识符、关键字和保留字</h3><h4 id="1-标识符"><a href="#1-标识符" class="headerlink" title="1. 标识符"></a>1. 标识符</h4><p>就是指开发人员为变量、属性、函数、参数取的名字</p><p><strong>标识符不能是关键字或保留字</strong></p><h4 id="2-关键字"><a href="#2-关键字" class="headerlink" title="2. 关键字"></a>2. 关键字</h4><p>是指S本身已经使用了的字，不能再用它们充当变量名、方法名。包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、<br>instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with等。</p><h4 id="3-保留字"><a href="#3-保留字" class="headerlink" title="3.保留字"></a>3.保留字</h4><p>实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。包括：boolean、char、class、double、float、goto、long、static、enum等</p><h3 id="JavaScript中的运算符"><a href="#JavaScript中的运算符" class="headerlink" title="JavaScript中的运算符"></a>JavaScript中的运算符</h3><h4 id="1-运算符总结"><a href="#1-运算符总结" class="headerlink" title="1. 运算符总结"></a>1. 运算符总结</h4><table><thead><tr><th align="center">运算符类型</th><th align="center">符号</th><th>备注</th></tr></thead><tbody><tr><td align="center">算数运算符</td><td align="center">+ - * &#x2F; %</td><td></td></tr><tr><td align="center">赋值运算符</td><td align="center">+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;</td><td></td></tr><tr><td align="center">字符串的连接符</td><td align="center">+</td><td></td></tr><tr><td align="center">逻辑运算符</td><td align="center">&amp;&amp;、||、!</td><td>1. &amp;&amp;<br/>当有多个表达式（值）时，左边的表达式值可以确定结果时，就不再继续运算右边的表达式<br/>语法：表达式1&amp;&amp;表达式2<br/>如果第一个表达式的值为真，则返回表达式2<br/>如果第一个表达式的值为假，则返回表达式1<br/>2. ||<br/>如果第一个表达式的值为真，则返回表达式1<br/>如果第一个表达式的值为假，则返回表达式2</td></tr><tr><td align="center">条件运算符</td><td align="center">?:</td><td>判断语句？ 表达式1：表达式2<br/>若判断结果为真，着执行表达式1；若判断结果为假，则执行表达式2</td></tr><tr><td align="center">比较运算符</td><td align="center">&#x3D;&#x3D; (会转型)、!&#x3D;、&gt;&#x3D;、&lt;&#x3D;、&lt;、&gt;、&#x3D;&#x3D;&#x3D; 、! &#x3D;&#x3D;(全等，要求值和类型都一致)</td><td>比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值(true&#x2F;false)作为比较运算的结果</td></tr><tr><td align="center">递增递减运算符</td><td align="center">++ –</td><td>自增自减运算符，常用在循环语句中</td></tr></tbody></table><h4 id="2-运算符优先级"><a href="#2-运算符优先级" class="headerlink" title="2.运算符优先级"></a>2.运算符优先级</h4><table><thead><tr><th align="center">优先级</th><th align="center">运算符</th><th align="center">顺序</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">小括号</td><td align="center">（）</td></tr><tr><td align="center">2</td><td align="center">一元运算符</td><td align="center">++ – &#x3D;&#x3D;<strong>!</strong>&#x3D;&#x3D;</td></tr><tr><td align="center">3</td><td align="center">算数运算符</td><td align="center">先*&#x2F;后+-</td></tr><tr><td align="center">4</td><td align="center">关系运算符</td><td align="center">&gt; &gt;&#x3D; &lt; &lt;&#x3D;</td></tr><tr><td align="center">5</td><td align="center">相等运算符</td><td align="center">&#x3D;&#x3D; !&#x3D; &#x3D;&#x3D;&#x3D; ! &#x3D;&#x3D;</td></tr><tr><td align="center">6</td><td align="center">逻辑运算符</td><td align="center">先&amp;&amp;后||</td></tr><tr><td align="center">7</td><td align="center">赋值运算符</td><td align="center">&#x3D;</td></tr><tr><td align="center">8</td><td align="center">逗号运算符</td><td align="center">，</td></tr></tbody></table><p><strong>一元运算符里面的逻辑非的优先级很高</strong></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="1-创建数组"><a href="#1-创建数组" class="headerlink" title="1. 创建数组"></a>1. 创建数组</h4><ul><li><p>利用new创建数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();   <span class="comment">//创建了一个空的数组</span></span><br></pre></td></tr></table></figure></li><li><p>利用数组字面量创建数组</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;www&#x27;</span>,<span class="literal">true</span>];</span><br></pre></td></tr></table></figure><h4 id="2-获取数组元素"><a href="#2-获取数组元素" class="headerlink" title="2. 获取数组元素"></a>2. 获取数组元素</h4><p>通过数组名[索引]的形式获取数组中的元素</p><h4 id="3-新增数组元素"><a href="#3-新增数组元素" class="headerlink" title="3.新增数组元素"></a>3.新增数组元素</h4><ul><li><p>修改length长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>);</span><br><span class="line">arr.<span class="property">length</span> = <span class="number">5</span>;</span><br><span class="line">consloe.<span class="title function_">log</span>(arr[<span class="number">3</span>]);   <span class="comment">//undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">4</span>]);   <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li><li><p>修改索引号</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">arr1[<span class="number">3</span>] = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br></pre></td></tr></table></figure><h4 id="4-添加删除数组元素的方法"><a href="#4-添加删除数组元素的方法" class="headerlink" title="4.添加删除数组元素的方法"></a>4.添加删除数组元素的方法</h4><table><thead><tr><th align="center">方法名</th><th align="center">说明</th><th align="center">返回值</th></tr></thead><tbody><tr><td align="center">push(参数1……)</td><td align="center">&#x3D;&#x3D;末尾添加&#x3D;&#x3D;一个或多个元素，注意修改原数组</td><td align="center">返回新数组的长度</td></tr><tr><td align="center">pop()</td><td align="center">删除数组的&#x3D;&#x3D;最后一个&#x3D;&#x3D;元素，把数组长度减1，没有参数</td><td align="center">返回删除的元素的值</td></tr><tr><td align="center">unshift(参数1…..)</td><td align="center">向&#x3D;&#x3D;数组的开头&#x3D;&#x3D;添加一个或多个元素，注意修改原数组</td><td align="center">返回新数组的长度</td></tr><tr><td align="center">shift()</td><td align="center">删除数组的&#x3D;&#x3D;第一个&#x3D;&#x3D;元素，数组长度减1，没有参数</td><td align="center">返回第一个元素的值</td></tr></tbody></table><h4 id="5-返回数组元素索引号的方法"><a href="#5-返回数组元素索引号的方法" class="headerlink" title="5. 返回数组元素索引号的方法"></a>5. 返回数组元素索引号的方法</h4><p>indexOf(数组元素)</p><p>作用就是返回数组元素的索引号，只返回第一个满足条件的索引号，如果在数组中找不到元素，则返回-1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;blue&#x27;</span>));       <span class="comment">//返回第一个blue的索引号</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;blue&#x27;</span>));   <span class="comment">//从后往前检索，返回第二个blue的索引号</span></span><br></pre></td></tr></table></figure><h4 id="6-数组的连接、截取和删除"><a href="#6-数组的连接、截取和删除" class="headerlink" title="6. 数组的连接、截取和删除"></a>6. 数组的连接、截取和删除</h4><table><thead><tr><th align="center">方法名</th><th align="center">说明</th><th align="center">返回值</th></tr></thead><tbody><tr><td align="center">concat()</td><td align="center">连接两个或多个数组，不影响原数组</td><td align="center">返回一个新的数组</td></tr><tr><td align="center">slice()</td><td align="center">数组截取slice(begin, end)</td><td align="center">返回被截取项目的新数组</td></tr><tr><td align="center">splice()</td><td align="center">数组删除splice(第几个开始,要删除个数)</td><td align="center">返回被删除项目的新数组(会影响原数组)</td></tr></tbody></table><h3 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h3><h4 id="1-声明函数"><a href="#1-声明函数" class="headerlink" title="1. 声明函数"></a>1. 声明函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.命名函数 </span></span><br><span class="line"><span class="comment">//function 函数名 ()&#123;</span></span><br><span class="line"><span class="comment">//函数体</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 函数表达式（匿名函数)</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params">aru</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数表达式&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(aru);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="string">&#x27;JavaScript&#x27;</span>);</span><br><span class="line"><span class="comment">//(1)fun是变量名，不是函数名</span></span><br><span class="line"><span class="comment">//(2)函数表达式声明方式跟声明变量差不多，只是函数表达里存的是函数</span></span><br><span class="line"><span class="comment">//(3)函数表达式也可以传递参数</span></span><br></pre></td></tr></table></figure><ul><li>function是声明函数的关键字 全部小写</li><li>函数名一般是动词</li><li>函数不调用自己不执行</li></ul><h4 id="2-调用函数"><a href="#2-调用函数" class="headerlink" title="2. 调用函数"></a>2. 调用函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数名();</span></span><br><span class="line"><span class="title function_">sayHi</span>();  <span class="comment">//小括号不能省</span></span><br></pre></td></tr></table></figure><h4 id="3-形参与实参"><a href="#3-形参与实参" class="headerlink" title="3. 形参与实参"></a>3. 形参与实参</h4><ul><li><p>函数可以重复执行相同的代码</p></li><li><p>在声明函数的小括号内是形参，在函数调用的小括号内是实参</p></li><li><p>形参是接受实参的，形参类似于一个变量</p></li><li><table><thead><tr><th align="center">参数个数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">实参个数等于行参个数</td><td align="center">输出正确结果</td></tr><tr><td align="center">实参个数多于实参个数</td><td align="center">只取到形参的个数</td></tr><tr><td align="center">实参个数小于行参个数</td><td align="center">多的形参定义为undefined，结果为NaN</td></tr></tbody></table></li></ul><h4 id="4-arguments的使用"><a href="#4-arguments的使用" class="headerlink" title="4. arguments的使用"></a>4. arguments的使用</h4><p>（1）只有函数才有arguments对象，而且是每个函数都内置好的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">consloe.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">//我们可以按照数组的方式遍历arguments</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;<span class="variable language_">arguments</span>.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>是一个伪数组 并不是真正意义上的数组</li><li>具有数组的length属性</li><li>按照索引的方式进行存储</li><li>没有真正数组的一些方法pop() 、push()等</li></ul><h3 id="JavaScript中的对象"><a href="#JavaScript中的对象" class="headerlink" title="JavaScript中的对象"></a>JavaScript中的对象</h3><h4 id="1-对象的调用"><a href="#1-对象的调用" class="headerlink" title="1. 对象的调用"></a>1. 对象的调用</h4><ul><li>对象的属性调用：对象.属性名</li><li>对象的属性的另一种调用方式：对象[‘属性名’]，属性&#x3D;&#x3D;必须加引号&#x3D;&#x3D;</li><li>对象中的方法调用：对象.方法名()，方法名后面&#x3D;&#x3D;一定要加括号&#x3D;&#x3D;</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(star.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(star[<span class="string">&#x27;name&#x27;</span>]);   <span class="comment">//调用名字属性</span></span><br><span class="line">star.<span class="title function_">sayHi</span>();   <span class="comment">//调用方法 </span></span><br></pre></td></tr></table></figure><h4 id="2-创建对象"><a href="#2-创建对象" class="headerlink" title="2.创建对象"></a>2.创建对象</h4><h5 id="1-利用对象字面量创建对象"><a href="#1-利用对象字面量创建对象" class="headerlink" title="(1)利用对象字面量创建对象"></a>(1)利用对象字面量创建对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var obj = &#123;&#125;;创建了一个空的对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;冰墩墩&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>里面的属性或方法采取键值对的形式  键   属性名： 值   属性值</li><li>多个属性或方法中间用&#x3D;&#x3D;逗号&#x3D;&#x3D;隔开</li><li>方法冒号后面更多是一个匿名函数</li></ul><h5 id="（2）利用new-Object创建对象"><a href="#（2）利用new-Object创建对象" class="headerlink" title="（2）利用new Object创建对象"></a>（2）利用new Object创建对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();  <span class="comment">//创建了一个空的对象</span></span><br><span class="line">obj.<span class="property">uname</span> = <span class="string">&#x27;冰墩墩&#x27;</span>;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">1</span>;</span><br><span class="line">obj.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">obj.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">uname</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;sex&#x27;</span>]);</span><br><span class="line">obj.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure><ul><li>利用等号赋值的方法，添加对象的属性和方法</li><li>每个属性和方法之间用&#x3D;&#x3D;分号&#x3D;&#x3D;结束</li></ul><h5 id="（3）构造函数创建对象"><a href="#（3）构造函数创建对象" class="headerlink" title="（3）构造函数创建对象"></a>（3）构造函数创建对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数的语法格式</span></span><br><span class="line"><span class="comment">//function 构造函数名()&#123;</span></span><br><span class="line"><span class="comment">//this.属性 = 值;</span></span><br><span class="line"><span class="comment">//this.方法 = function()&#123;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age, sex</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = uname;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params">sang</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sang);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>，<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><ul><li>new关键字的执行过程<ul><li>new构造函数可以在内存中创建一个空的对象</li><li>this就会指向刚才创建的空的对象</li><li>执行构造函数里面的代码 给这个空对象添加属性和方法</li><li>返回这个对象</li></ul></li></ul><h4 id="3-Math对象"><a href="#3-Math对象" class="headerlink" title="3.Math对象"></a>3.Math对象</h4><p>math对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算可以用Math中的成员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="property">PI</span>             <span class="comment">//圆周率</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>()        <span class="comment">//向下取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>()         <span class="comment">//向上取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>()        <span class="comment">//四舍五入就近取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>()          <span class="comment">//绝对值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>()/<span class="title class_">Math</span>.<span class="property">min</span> <span class="comment">//求最大值和最小值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>()       <span class="comment">//返回0~1之间的随机数</span></span><br></pre></td></tr></table></figure><h4 id="4-Date对象"><a href="#4-Date对象" class="headerlink" title="4. Date对象"></a>4. Date对象</h4><ol><li>（1）获取当前时间必须实例化</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var now = new Date();</span><br><span class="line">console.log(now);</span><br></pre></td></tr></table></figure><p>（2）Date()构造函数的参数</p><p>如果括号里面有时间，就返回参数里面的时间。例如日期格式字符串为‘2019-5-1’，可以写成new Date(‘2019-5-1‘)<br>或者new Date(‘2019&#x2F;5&#x2F;1’)</p><ol start="2"><li><p>日期格式化</p><table><thead><tr><th>方法名</th><th>说明</th><th>代码</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获取当年</td><td>dObj.getFullYear()</td></tr><tr><td>getMonth()</td><td>获取当月（0到11）</td><td>dObj.getMonth()</td></tr><tr><td>getDate()</td><td>获取当天日期</td><td>dObj.getDate()</td></tr><tr><td>getDay()</td><td>获取星期几（周日0到周六6）</td><td>dObj.getDay()</td></tr><tr><td>getHours()</td><td>获取当前小时</td><td>dObj.getHours()</td></tr><tr><td>getMinutes()</td><td>获取当前分钟</td><td>dObj.getMinutes()</td></tr><tr><td>getSeconds()</td><td>获取当前秒钟</td><td>dObj.getSeconds()</td></tr></tbody></table></li><li><p>获得Date总的毫秒数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 通过valueOf()  getTime()</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">valueOf</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>());</span><br><span class="line"><span class="comment">//2.简单的写法（最常用）</span></span><br><span class="line"><span class="keyword">var</span> date1 = +<span class="keyword">new</span> <span class="title class_">Date</span>();  <span class="comment">//+new Date()返回的就是毫秒数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1);</span><br><span class="line"><span class="comment">//3.H5新增的获得总的毫秒数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>哈哈哈，这是关于我的页面</p><!-- GitCalendar容器 --><div id="gitZone"></div><style>/* 哔哔页面 */#bibi button {  color: #fff;  border: 0;  margin: 20px auto;  border-radius: 0.3125rem;  display: block;  padding: 0 1rem;  height: 40px;  font-weight: 500;  text-align: center;  transition: all 0.5s ease-out;  background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);  background-size: 1000% 1000%;  animation: Gradient 60s linear infinite;  outline: 0;}<p>#bibi .bb-info {<br>  font-weight: 700;<br>  font-size: 22px;<br>}</p><p>#bibi .bb-card {<br>  padding: 15px;<br>  border-radius: 10px;<br>  background: rgba(255, 255, 255, 0.1);<br>  border: 1px solid #a5a5a5ee;<br>  margin-top: 20px;<br>  transition: all 0.25s;<br>  user-select: none;<br>  width: calc(48% - 7px);<br>  margin: 10px;<br>}</p><p>@media screen and (max-width: 800px) {<br>  #bibi .bb-card {<br>  width: 100%;<br>  }<br>}</p><p>#bibi .bb-card:hover {<br>  box-shadow: 0 5px 10px 8px #07111b29;<br>  transform: translateY(-3px);<br>}</p><p>#bibi .card-header {<br>  display: flex;<br>  align-items: center;<br>}</p><p>#bibi .card-header .avatar {<br>  width: 32px;<br>  height: 32px;<br>  border-radius: 50%;<br>  margin-right: 10px;<br>  border-radius: 20px;<br>  overflow: hidden;<br>}</p><p>#bibi .card-header svg {<br>  height: 20px;<br>  width: 20px;<br>  margin-left: 5px;<br>}</p><p>#bibi .card-header .card-time {<br>  font-size: 12px;<br>  text-shadow: #d9d9d9 0 0 1px, #fffffb 0 0 1px, #fffffb 0 0 2px;<br>  margin-left: 10px;<br>}</p><p>#bibi .card-content {<br>  padding: 10px 0;<br>  white-space: pre-wrap;<br>}</p><p>#bibi .card-footer {<br>  display: flex;<br>  padding-bottom: 10px;<br>}</p><p>#bibi .card-footer .card-label {<br>  border-radius: 5px;<br>  padding: 0 5px;<br>  font-weight: 550;<br>  border-radius: 5px;<br>  box-shadow: inset 0 -1px 0 rgb(27 31 35 &#x2F; 12%);<br>  font-size: 14px;<br>  user-select: none;<br>  margin-right: 10px;<br>}</p><p>div#bb_loading img{<br>  border-radius: 15px;<br>}</p><p>#bb-main {<br>  display: flex;<br>  flex-direction: row;<br>  flex-wrap: wrap;<br>  justify-content: flex-start;<br>}</p><p></style></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/universe.css"/>
      <url>/css/universe.css</url>
      
        <content type="html"><![CDATA[/* 背景宇宙星光  */#universe {    display: block;    position: fixed;    margin: 0;    padding: 0;    border: 0;    outline: 0;    left: 0;    top: 0;    width: 100%;    height: 100%;    pointer-events: none;    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */    z-index: -1;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {    background: transparent !important;}#page-header {    background: transparent !important;}/* 白天模式遮罩透明 */#footer::before {    background: transparent !important;}#page-header::before {    background: transparent !important;}/* 夜间模式遮罩透明 */[data-theme="dark"] #footer::before {    background: transparent !important;}[data-theme="dark"] #page-header::before {    background: transparent !important;}/* 侧边栏个人信息卡片动态渐变色 */#aside-content>.card-widget.card-info {    background: linear-gradient(-45deg,            #e8d8b9,            #eccec5,            #a3e9eb,            #bdbdf0,            #eec1ea);    box-shadow: 0 0 5px rgb(66, 68, 68);    position: relative;    background-size: 400% 400%;    -webkit-animation: Gradient 10s ease infinite;    -moz-animation: Gradient 10s ease infinite;    animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}@-moz-keyframes Gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}@keyframes Gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content>.card-widget.card-info {    background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content>.card-widget.card-info>#card-info-btn {    background-color: #3eb8be;    border-radius: 8px;}/*哔哩哔哩视频适配*/.aspect-ratio {    position: relative;    width: 90%;    height: auto;    padding-bottom: 75%;    margin: 3% auto;    text-align: center;}.aspect-ratio iframe {    position: absolute;    width: 100%;    height: 86%;    left: 0;    top: 0;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>charts</title>
      <link href="/charts/index.html"/>
      <url>/charts/index.html</url>
      
        <content type="html"><![CDATA[<script src="https://npm.elemecdn.com/echarts@4.9.0/dist/echarts.min.js"></script><!-- 文章发布时间统计图 --><div id="posts-chart" data-start="2021-01" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章标签统计图 --><div id="tags-chart" data-length="10" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章分类统计图 --><div id="categories-chart" data-parent="true" style="border-radius: 8px; height: 300px; padding: 10px;"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle="rgba("+d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle="rgba("+r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener("resize",f,!1),function(){h=s.getContext("2d");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index-1.html"/>
      <url>/tags/index-1.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
